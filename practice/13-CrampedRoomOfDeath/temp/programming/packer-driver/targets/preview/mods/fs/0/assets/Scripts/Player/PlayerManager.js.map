{"version":3,"sources":["file:///Users/lindanian/projects/git/cocos-creator-projects/practice/13-CrampedRoomOfDeath/assets/Scripts/Player/PlayerManager.ts"],"names":["_decorator","CONTROLLER_ENUM","DIRECTION_ENUM","ENTITY_STATE_ENUM","EVENT_ENUM","SHAKE_TYPE_ENUM","EventManager","PlayerStateMachine","EntityManager","DataManager","ccclass","property","ANIMATION_SPEED","PlayerManager","init","params","fsm","node","addComponent","targetX","x","targetY","y","Instance","on","PLAYER_CTRL","inputHandle","ATTACK_PLAYER","onDied","onDestroy","off","updateXY","speed","Math","abs","isMoving","emit","PLAYER_MOVE_END","inputDirection","enemyId","willAttack","state","DEATH","willBlock","TOP","SCREEN_SHAKE","BOTTOM","LEFT","RIGHT","move","onAttack","ATTACK","ATTACK_ENEMY","DOOR_OPEN","enemies","filter","item","i","length","enemyX","enemyY","id","enemyState","direction","console","log","onAttackShake","type","willBlockMy","tileInfo","door","doorX","doorY","doorState","bursts","playerNextY","weaponNextY","BLOCKFRONT","playerTile","weaponTile","burstX","burstY","burstId","burstState","moveable","turnable","weaponNextX","TURNLEFT","nextX","nextY","BLOCKTURNLEFT","enemy","burst","mapRowCount","row","mapColumnCount","column","nextPlayerTile","nextWeaponTile","some","BLOCKBACK","BLOCKRIGHT","BLOCKLEFT","playerNextX","TURNRIGHT","BLOCKTURNRIGHT","showSmoke","SHOW_SMOKE","update"],"mappings":"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","sourcesContent":["import {_decorator} from 'cc';\nimport {CONTROLLER_ENUM, DIRECTION_ENUM, ENTITY_STATE_ENUM, EVENT_ENUM, SHAKE_TYPE_ENUM} from \"db://assets/Enums\";\nimport EventManager from \"db://assets/Runtime/EventManager\";\nimport {PlayerStateMachine} from \"db://assets/Scripts/Player/PlayerStateMachine\";\nimport {EntityManager} from \"db://assets/Base/EntityManager\";\nimport DataManager from \"db://assets/Runtime/DataManager\";\nimport {IEntity} from \"db://assets/Levels\";\nimport {EnemyManager} from \"db://assets/Base/EnemyManager\";\nimport {BurstManager} from \"db://assets/Scripts/Burst/BurstManager\";\n\nconst { ccclass, property } = _decorator;\n\nconst ANIMATION_SPEED = 1/8;\n\n@ccclass('PlayerManager')\nexport class PlayerManager extends EntityManager {\n    targetX:number = 0\n    targetY:number = 0\n    isMoving: boolean = false\n    private readonly speed = ANIMATION_SPEED\n    // private testAttackCount = 0\n\n    async init(params: IEntity){\n        this.fsm = this.node.addComponent(PlayerStateMachine);\n        await this.fsm.init();\n        super.init(params);\n        this.targetX = this.x;\n        this.targetY = this.y;;\n        EventManager.Instance.on(EVENT_ENUM.PLAYER_CTRL, this.inputHandle, this);\n        EventManager.Instance.on(EVENT_ENUM.ATTACK_PLAYER, this.onDied, this);\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        EventManager.Instance.off(EVENT_ENUM.PLAYER_CTRL, this.inputHandle);\n        EventManager.Instance.off(EVENT_ENUM.ATTACK_PLAYER, this.onDied);\n    }\n\n    updateXY(){\n        if(this.targetX < this.x){\n            this.x -= this.speed\n        }else if(this.targetX > this.x){\n            this.x += this.speed\n        }\n\n        if(this.targetY < this.y){\n            this.y -= this.speed\n        }else if(this.targetY > this.y){\n            this.y += this.speed\n        }\n\n        if(Math.abs(this.targetX - this.x) < 0.1 && Math.abs(this.targetY - this.y) < 0.1 && this.isMoving){\n            this.x = this.targetX;\n            this.y = this.targetY;\n            this.isMoving = false;\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\n        }\n    }\n\n    inputHandle(inputDirection: CONTROLLER_ENUM){\n        //攻击\n        const enemyId = this.willAttack(inputDirection);\n        if(enemyId){\n            return;\n        }\n\n        if(this.state === ENTITY_STATE_ENUM.DEATH){\n            return;\n        }\n\n        if(this.willBlock(inputDirection)){\n            // console.log('撞墙');\n            if(inputDirection === CONTROLLER_ENUM.TOP){\n                EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.TOP);\n            }else if(inputDirection === CONTROLLER_ENUM.BOTTOM){\n                EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.BOTTOM);\n            }else if(inputDirection === CONTROLLER_ENUM.LEFT){\n                EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.LEFT);\n            }else if(inputDirection === CONTROLLER_ENUM.RIGHT){\n                EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.RIGHT);\n            }\n            return\n        }\n        this.move(inputDirection);\n    }\n\n    onAttack(enemyId: string){\n        if(enemyId){\n            this.state = ENTITY_STATE_ENUM.ATTACK;\n            EventManager.Instance.emit(EVENT_ENUM.ATTACK_ENEMY, enemyId);\n            EventManager.Instance.emit(EVENT_ENUM.DOOR_OPEN);\n        }\n        return enemyId;\n    }\n\n    willAttack(inputDirection: CONTROLLER_ENUM){\n        const enemies = DataManager.Instance.enemies.filter((item)=> item.state !== ENTITY_STATE_ENUM.DEATH);\n        for (let i = 0; i < enemies.length; i++) {\n            const { x: enemyX, y: enemyY, id: enemyId, state: enemyState } = enemies[i];\n            if(inputDirection === CONTROLLER_ENUM.TOP && this.direction === DIRECTION_ENUM.TOP && enemyX === this.x && enemyY === this.targetY - 2){\n                console.log('玩家攻击');\n                return this.onAttack(enemyId);\n            }else if(inputDirection === CONTROLLER_ENUM.LEFT && this.direction === DIRECTION_ENUM.LEFT && enemyX === this.targetX - 2 && enemyY === this.y){\n                return this.onAttack(enemyId);\n            }else if(inputDirection === CONTROLLER_ENUM.RIGHT && this.direction === DIRECTION_ENUM.RIGHT && enemyX === this.targetX + 2 && enemyY === this.y){\n                // this.testAttackCount++\n                // if(this.testAttackCount === 3){\n                //     return false;\n                // }\n                return this.onAttack(enemyId);\n            }else if(inputDirection === CONTROLLER_ENUM.BOTTOM && this.direction === DIRECTION_ENUM.BOTTOM && enemyX === this.x && enemyY === this.targetY + 2){\n                return this.onAttack(enemyId);\n            }else {\n                return '';\n            }\n        }\n    }\n\n    onAttackShake(type: SHAKE_TYPE_ENUM){\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, type);\n    }\n\n    willBlockMy(inputDirection: CONTROLLER_ENUM){\n        const { targetX: x, targetY: y, direction } = this;\n        // console.log('this', this);\n        const {\n            tileInfo,\n            door: { x: doorX, y: doorY, state: doorState },\n        } = DataManager.Instance;\n        const enemies = DataManager.Instance.enemies.filter((item)=> item.state !== ENTITY_STATE_ENUM.DEATH);\n        const bursts = DataManager.Instance.bursts.filter((item)=> item.state !== ENTITY_STATE_ENUM.DEATH);\n\n        //按钮方向-向上\n        if(inputDirection === CONTROLLER_ENUM.TOP){\n            if(direction === DIRECTION_ENUM.TOP){\n                //疑问\n                const playerNextY = y - 1;\n                const weaponNextY = y - 2;\n                //玩家走出地图\n                if(playerNextY <= 1){\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\n                    return true;\n                }\n                //下一个瓦片\n                const playerTile = tileInfo[x][playerNextY];\n                const weaponTile = tileInfo[x][weaponNextY];\n\n                //门的碰撞\n                if(((x === doorX && playerNextY === doorY) || (x === doorX && weaponNextY === doorY)) && doorState !== ENTITY_STATE_ENUM.DEATH){\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\n                    return true;\n                }\n\n                //敌人的碰撞\n                for (let i = 0; i < enemies.length; i++) {\n                    const { x: enemyX, y: enemyY, id: enemyId, state: enemyState } = enemies[i];\n                    if(((x === enemyX && playerNextY === enemyY) || (x === enemyX && weaponNextY === enemyY))){\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\n                        return true;\n                    }\n                }\n\n                //地裂的碰撞\n                for (let i = 0; i < bursts.length; i++) {\n                    const { x: burstX, y: burstY, id: burstId, state: burstState } = bursts[i];\n                    if(((x === burstX && playerNextY === burstY) || (x === burstX && weaponNextY === burstY))){\n                        return false;\n                    }\n                }\n\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\n                    //empty\n                }else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\n                    return true;\n                }\n            }else if(direction === DIRECTION_ENUM.LEFT){\n                //左方向移动\n                const playerNextY = y - 1;\n                const weaponNextX = x - 1;\n                const weaponNextY = playerNextY;\n                //下一个瓦片\n                const playerTile = tileInfo[x][playerNextY];\n                const weaponTile = tileInfo[weaponNextX][weaponNextY];\n                if(playerTile?.moveable && weaponTile.moveable){\n                    //empty\n                }else {\n                    return true;\n                }\n            }else if(direction === DIRECTION_ENUM.RIGHT){\n                //右方向移动\n                const playerNextY = y - 1;\n                const weaponNextX = x + 1;\n                const weaponNextY = playerNextY;\n                //下一个瓦片\n                const playerTile = tileInfo[x][playerNextY];\n                const weaponTile = tileInfo[weaponNextX][weaponNextY];\n                if(playerTile?.moveable && weaponTile.moveable){\n                    //empty\n                }else {\n                    return true;\n                }\n            }\n        }else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\n            let nextX\n            let nextY\n            // console.log('direction', direction)\n            if(direction === DIRECTION_ENUM.TOP){\n                nextX = x - 1;\n                nextY = y - 1;\n            }else if(direction === DIRECTION_ENUM.BOTTOM){\n                nextX = x + 1;\n                nextY = y + 1;\n            }else if(direction === DIRECTION_ENUM.LEFT){\n                nextX = x - 1;\n                nextY = y + 1;\n            }else if(direction === DIRECTION_ENUM.RIGHT){\n                nextX = x + 1;\n                nextY = y - 1;\n            }\n\n            //门的碰撞\n            if(((x === doorX && nextY === doorY) || (nextX === doorX && y === doorY) || (nextX === doorX && nextY === doorY)) && doorState !== ENTITY_STATE_ENUM.DEATH){\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\n                return true;\n            }\n\n            //敌人的碰撞\n            for (let i = 0; i < enemies.length; i++) {\n                const { x: enemyX, y: enemyY, id: enemyId, state: enemyState } = enemies[i];\n                if(((x === enemyX && nextY === enemyY) || (x === enemyX && y === enemyY) || (nextX === enemyX && nextY === enemyY))){\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\n                    return true;\n                }\n            }\n\n            //判断地图元素\n            // console.log('tileInfo', tileInfo)\n            // console.log('x', x)\n            // console.log('nextX', nextX)\n            // console.log('y', y)\n            // console.log('nextY', nextY)\n            if(\n                (!tileInfo[x][nextY] || tileInfo[x][nextY].turnable) &&\n                (!tileInfo[nextX][y] || tileInfo[nextX][y].turnable) &&\n                (!tileInfo[nextX][nextY] || tileInfo[nextX][nextY].turnable)\n            ){\n                //empty\n            }else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    willBlock(type: CONTROLLER_ENUM) {\n        const { targetX: x, targetY: y, direction } = this\n        const { tileInfo: tileInfo } = DataManager.Instance\n        const enemies: EnemyManager[] = DataManager.Instance.enemies.filter(\n            (enemy: EnemyManager) => enemy.state !== ENTITY_STATE_ENUM.DEATH,\n        )\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.door || {}\n        const bursts: BurstManager[] = DataManager.Instance.bursts.filter(\n            (burst: BurstManager) => burst.state !== ENTITY_STATE_ENUM.DEATH,\n        )\n\n        const { mapRowCount: row, mapColumnCount: column } = DataManager.Instance\n\n        //按钮方向——向上\n        if (type === CONTROLLER_ENUM.TOP) {\n            const playerNextY = y - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextY < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const weaponNextY = y - 2\n                const nextPlayerTile = tileInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileInfo[x]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === x && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                // 判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === x && enemyY === weaponNextY) || (enemyX === x && enemyY === playerNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextY < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileInfo[x]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === x && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if (enemyX === x && enemyY === playerNextY) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextY < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === x && enemyY === playerNextY) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextY < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === x && enemyY === playerNextY) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                        return true\n                    }\n                }\n\n                // 判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n            }\n\n            //按钮方向——向下\n        } else if (type === CONTROLLER_ENUM.BOTTOM) {\n            const playerNextY = y + 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextY > column - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileInfo[x]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === x && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if (enemyX === x && enemyY === playerNextY) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                        return true\n                    }\n                }\n\n                // 判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextY > column - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextY = y + 2\n                const nextPlayerTile = tileInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileInfo[x]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === x && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                // 判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === x && enemyY === weaponNextY) || (enemyX === x && enemyY === playerNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextY > column - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === x && enemyY === playerNextY) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextY > column - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === x && enemyY === playerNextY) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n            }\n\n            //按钮方向——向左\n        } else if (type === CONTROLLER_ENUM.LEFT) {\n            const playerNextX = x - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextX < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextX < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextX < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x - 2\n                const nextPlayerTile = tileInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileInfo[weaponNextX]?.[y]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === y)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === y)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextX < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileInfo[weaponNextX]?.[y]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === y)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if (enemyX === playerNextX && enemyY === y) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n            }\n\n            //按钮方向——向右\n        } else if (type === CONTROLLER_ENUM.RIGHT) {\n            const playerNextX = x + 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextX > row - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextX > row - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextX > row - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileInfo[weaponNextX]?.[y]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === y)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if (enemyX === playerNextX && enemyY === y) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextX > row - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x + 2\n                const nextPlayerTile = tileInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileInfo[weaponNextX]?.[y]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === y)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === y)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.turnable)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n            }\n\n            //按钮方向——左转\n        } else if (type === CONTROLLER_ENUM.TURNLEFT) {\n            let nextY, nextX\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上左转的话，左上角三个tile都必须turnable为true，并且没有敌人\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y - 1\n                nextX = x + 1\n            }\n\n            //判断门\n            if (\n                ((doorX === x && doorY === nextY) ||\n                    (doorX === nextX && doorY === y) ||\n                    (doorX === nextX && doorY === nextY)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n                return true\n            }\n\n            //判断敌人\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if (enemyX === nextX && enemyY === y) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                } else if (enemyX === nextX && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                } else if (enemyX === x && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                }\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileInfo[x]?.[nextY] || tileInfo[x]?.[nextY].turnable) &&\n                (!tileInfo[nextX]?.[y] || tileInfo[nextX]?.[y].turnable) &&\n                (!tileInfo[nextX]?.[nextY] || tileInfo[nextX]?.[nextY].turnable)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n                return true\n            }\n\n            //按钮方向——右转\n        } else if (type === CONTROLLER_ENUM.TURNRIGHT) {\n            let nextX, nextY\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上右转的话，右上角三个tile都必须turnable为true\n                nextY = y - 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y + 1\n                nextX = x + 1\n            }\n\n            //判断门\n            if (\n                ((doorX === x && doorY === nextY) ||\n                    (doorX === nextX && doorY === y) ||\n                    (doorX === nextX && doorY === nextY)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n                return true\n            }\n\n            //判断敌人\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if (enemyX === nextX && enemyY === y) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                } else if (enemyX === nextX && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                } else if (enemyX === x && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                }\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileInfo[x]?.[nextY] || tileInfo[x]?.[nextY].turnable) &&\n                (!tileInfo[nextX]?.[y] || tileInfo[nextX]?.[y].turnable) &&\n                (!tileInfo[nextX]?.[nextY] || tileInfo[nextX]?.[nextY].turnable)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n                return true\n            }\n        }\n\n        return false\n    }\n\n    //生成移动烟雾\n    showSmoke(direction: CONTROLLER_ENUM){\n        EventManager.Instance.emit(EVENT_ENUM.SHOW_SMOKE, this.x, this.y, direction);\n    }\n\n    //玩家移动\n    move(inputDirection: CONTROLLER_ENUM){\n        console.log('inputDirection', inputDirection)\n        if (inputDirection === CONTROLLER_ENUM.TOP){\n            this.targetY -=1;\n            this.showSmoke(inputDirection);\n        }else if(inputDirection === CONTROLLER_ENUM.BOTTOM){\n            this.targetY +=1;\n            this.showSmoke(inputDirection);\n        }else if(inputDirection === CONTROLLER_ENUM.LEFT){\n            this.targetX -=1;\n            this.showSmoke(inputDirection);\n        }else if(inputDirection === CONTROLLER_ENUM.RIGHT){\n            this.targetX +=1;\n            this.showSmoke(inputDirection);\n        }else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\n            if(this.direction === DIRECTION_ENUM.TOP){\n                this.direction = DIRECTION_ENUM.LEFT;\n            }else if(this.direction === DIRECTION_ENUM.LEFT){\n                this.direction = DIRECTION_ENUM.BOTTOM;\n            }else if(this.direction === DIRECTION_ENUM.BOTTOM){\n                this.direction = DIRECTION_ENUM.RIGHT;\n            }else if(this.direction === DIRECTION_ENUM.RIGHT){\n                this.direction = DIRECTION_ENUM.TOP;\n            }\n            this.state = ENTITY_STATE_ENUM.TURNLEFT;\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\n        }else if(inputDirection === CONTROLLER_ENUM.TURNRIGHT){\n            if(this.direction === DIRECTION_ENUM.TOP){\n                this.direction = DIRECTION_ENUM.RIGHT;\n            }else if(this.direction === DIRECTION_ENUM.LEFT){\n                this.direction = DIRECTION_ENUM.TOP;\n            }else if(this.direction === DIRECTION_ENUM.BOTTOM){\n                this.direction = DIRECTION_ENUM.LEFT;\n            }else if(this.direction === DIRECTION_ENUM.RIGHT){\n                this.direction = DIRECTION_ENUM.BOTTOM;\n            }\n            this.state = ENTITY_STATE_ENUM.TURNRIGHT;\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\n        }\n        if(!(inputDirection === CONTROLLER_ENUM.TURNLEFT || inputDirection === CONTROLLER_ENUM.TURNRIGHT)){\n            this.isMoving = true;\n            // EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\n        }\n    }\n\n    onDied(type: ENTITY_STATE_ENUM){\n        this.state = type;\n    }\n\n    update(){\n        this.updateXY();\n        super.update();\n    }\n}\n\n"]}