{"version":3,"sources":["file:///Users/lindanian/projects/git/cocos-creator-projects/practice/13-CrampedRoomOfDeath/assets/Base/State.ts"],"names":["State","AnimationClip","Sprite","animation","ResourceManager","sortSpriteFrame","ANIMATION_SPEED","constructor","fsm","path","wrapMode","speed","events","WrapMode","Normal","init","promise","Instance","loadDir","waitingList","push","spriteFrames","animationClip","track","ObjectTrack","TrackPath","toComponent","toProperty","frames","map","item","index","channel","curve","assignSorted","addTrack","name","duration","length","event","updateEventDatas","run","animationComponent","defaultClip","play"],"mappings":"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","sourcesContent":["/****\n* 1.需要知道animationClip\n* 2.需要具有播放动画能力\n* */\nimport {AnimationClip, Sprite, animation, SpriteFrame } from \"cc\";\nimport ResourceManager from \"db://assets/Runtime/ResourceManager\";\nimport {StateMachine} from \"db://assets/Base/StateMachine\";\nimport {sortSpriteFrame} from \"db://assets/Utils\";\n\nexport const ANIMATION_SPEED = 1/8;\n\nexport default class State {\n    constructor(\n        private fsm: StateMachine,\n        private path: string,\n        private wrapMode: AnimationClip.WrapMode = AnimationClip.WrapMode.Normal,\n        private speed: number = ANIMATION_SPEED,\n        private events: any[] = []\n    ){\n        this.init();\n    }\n    private animationClip: AnimationClip\n\n    async init(){\n        const promise = ResourceManager.Instance.loadDir(this.path);\n        this.fsm.waitingList.push(promise);\n        const spriteFrames = await promise;\n        this.animationClip = new AnimationClip();\n\n        const track = new animation.ObjectTrack(); // 创建一个对象轨道\n        track.path = new animation.TrackPath().toComponent(Sprite).toProperty('spriteFrame'); // 指定轨道路径\n        const frames:Array<[number, SpriteFrame]> = sortSpriteFrame(spriteFrames).map((item, index)=> [this.speed * index, item]);\n        // 为 x 通道的曲线添加关键帧\n        track.channel.curve.assignSorted(frames);\n        // 最后将轨道添加到动画剪辑以应用\n        this.animationClip.addTrack(track);\n        this.animationClip.name = this.path;\n        this.animationClip.duration = frames.length * this.speed; // 整个动画剪辑的周期\n        this.animationClip.wrapMode = this.wrapMode;\n\n        //绑定动画帧事件\n        for (const event of this.events) {\n            this.animationClip.events.push(event);\n        }\n        this.animationClip.updateEventDatas();\n        \n        // const animationComponent = this.node.getComponent(Animation);\n        // if (animationComponent && animationComponent.defaultClip) {\n        //     const { defaultClip } = animationComponent;\n        //     defaultClip.events.push({\n        //         frame: 0.5, // 第 0.5 秒时触发事件\n        //         func: 'onTriggered', // 事件触发时调用的函数名称\n        //         params: [ 0 ], // 向 `func` 传递的参数\n        //     });\n        //     defaultClip.updateEventDatas();\n        // }\n    }\n\n    run(){\n        if(this.fsm.animationComponent.defaultClip?.name === this.animationClip?.name){\n            return;\n        }\n        this.fsm.animationComponent.defaultClip = this.animationClip;\n        this.fsm.animationComponent.play();\n    }\n}"]}