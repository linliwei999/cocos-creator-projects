{"version":3,"sources":["file:///Users/lindanian/projects/git/cocos-creator-projects/practice/13-CrampedRoomOfDeath/assets/Scripts/Player/test/PlayerManager.ts"],"names":["_decorator","EventManager","CONTROLLER_ENUM","DIRECTION_ENUM","ENTITY_STATE_ENUM","EVENT_ENUM","SHAKE_TYPE_ENUM","DataManager","EntityManager","PlayerStateMachine","ccclass","PlayerManager","init","params","fsm","addComponent","targetX","x","targetY","y","Instance","on","PLAYER_CTRL","inputProcess","ATTACK_PLAYER","onDead","onDestroy","off","update","updateXY","speed","Math","abs","isMoving","emit","PLAYER_MOVE_END","type","state","onAttackShake","SCREEN_SHAKE","inputDirection","DEATH","AIRDEATH","ATTACK","id","willAttack","RECORD_STEP","ATTACK_ENEMY","DOOR_OPEN","willBlock","TOP","BOTTOM","LEFT","RIGHT","TURNLEFT","direction","TURNRIGHT","move","showSmoke","SHOW_SMOKE","enemies","filter","enemy","i","length","enemyX","enemyY","enemyId","tileInfo","doorX","doorY","doorState","door","bursts","burst","mapRowCount","row","mapColumnCount","column","playerNextY","BLOCKFRONT","weaponNextY","nextPlayerTile","nextWeaponTile","some","turnable","moveable","BLOCKBACK","BLOCKRIGHT","weaponNextX","BLOCKLEFT","playerNextX","nextY","nextX","BLOCKTURNLEFT","BLOCKTURNRIGHT"],"mappings":"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","sourcesContent":["import { _decorator } from 'cc'\nimport EventManager from '../../Runtime/EventManager'\nimport { CONTROLLER_ENUM, DIRECTION_ENUM, ENTITY_STATE_ENUM, EVENT_ENUM, SHAKE_TYPE_ENUM } from '../../Enum'\nimport DataManager from '../../Runtime/DataManager'\nimport { EntityManager } from '../../Base/EntityManager'\nimport { IEntity } from '../../Levels'\nimport { PlayerStateMachine } from './PlayerStateMachine'\nimport { EnemyManager } from '../../Base/EnemyManager'\nimport { BurstManager } from '../Burst/BurstManager'\n\nconst { ccclass } = _decorator\n\n@ccclass('PlayerManager')\nexport class PlayerManager extends EntityManager {\n  private readonly speed = 1 / 10\n  targetX: number\n  targetY: number\n  isMoving = false\n\n  async init(params: IEntity) {\n    this.fsm = this.addComponent(PlayerStateMachine)\n    await this.fsm.init()\n\n    super.init(params)\n    this.targetX = this.x\n    this.targetY = this.y\n\n    EventManager.Instance.on(EVENT_ENUM.PLAYER_CTRL, this.inputProcess, this)\n    EventManager.Instance.on(EVENT_ENUM.ATTACK_PLAYER, this.onDead, this)\n  }\n\n  onDestroy() {\n    super.onDestroy()\n    EventManager.Instance.off(EVENT_ENUM.PLAYER_CTRL, this.inputProcess)\n    EventManager.Instance.off(EVENT_ENUM.ATTACK_PLAYER, this.onDead)\n  }\n  update() {\n    this.updateXY()\n    super.update()\n  }\n\n  updateXY() {\n    //逼近targetX\n    if (this.targetX < this.x) {\n      this.x -= this.speed\n    } else if (this.targetX > this.x) {\n      this.x += this.speed\n    }\n\n    //逼近targetY\n    if (this.targetY < this.y) {\n      this.y -= this.speed\n    } else if (this.targetY > this.y) {\n      this.y += this.speed\n    }\n\n    //两者近似就触发结束\n    if (Math.abs(this.targetX - this.x) < 0.01 && Math.abs(this.targetY - this.y) < 0.01 && this.isMoving) {\n      this.x = this.targetX\n      this.y = this.targetY\n      this.isMoving = false\n      EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END)\n    }\n  }\n\n  onDead(type: ENTITY_STATE_ENUM) {\n    this.state = type\n  }\n\n  onAttackShake(type: SHAKE_TYPE_ENUM) {\n    EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, type)\n  }\n\n  inputProcess(inputDirection: CONTROLLER_ENUM) {\n    if (this.isMoving) {\n      return\n    }\n\n    if (\n      this.state === ENTITY_STATE_ENUM.DEATH ||\n      this.state === ENTITY_STATE_ENUM.AIRDEATH ||\n      this.state === ENTITY_STATE_ENUM.ATTACK\n    ) {\n      return\n    }\n\n    const id = this.willAttack(inputDirection)\n    if (id) {\n      EventManager.Instance.emit(EVENT_ENUM.RECORD_STEP)\n      this.state = ENTITY_STATE_ENUM.ATTACK\n      EventManager.Instance.emit(EVENT_ENUM.ATTACK_ENEMY, id)\n      EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END)\n      EventManager.Instance.emit(EVENT_ENUM.DOOR_OPEN)\n      return\n    }\n\n    if (this.willBlock(inputDirection)) {\n      if (inputDirection === CONTROLLER_ENUM.TOP) {\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.TOP)\n      } else if (inputDirection === CONTROLLER_ENUM.BOTTOM) {\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.BOTTOM)\n      } else if (inputDirection === CONTROLLER_ENUM.LEFT) {\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.LEFT)\n      } else if (inputDirection === CONTROLLER_ENUM.RIGHT) {\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.RIGHT)\n      } else if (inputDirection === CONTROLLER_ENUM.TURNLEFT && this.direction === DIRECTION_ENUM.TOP) {\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.LEFT)\n      } else if (inputDirection === CONTROLLER_ENUM.TURNLEFT && this.direction === DIRECTION_ENUM.LEFT) {\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.BOTTOM)\n      } else if (inputDirection === CONTROLLER_ENUM.TURNLEFT && this.direction === DIRECTION_ENUM.BOTTOM) {\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.RIGHT)\n      } else if (inputDirection === CONTROLLER_ENUM.TURNLEFT && this.direction === DIRECTION_ENUM.RIGHT) {\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.TOP)\n      } else if (inputDirection === CONTROLLER_ENUM.TURNRIGHT && this.direction === DIRECTION_ENUM.TOP) {\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.RIGHT)\n      } else if (inputDirection === CONTROLLER_ENUM.TURNRIGHT && this.direction === DIRECTION_ENUM.LEFT) {\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.TOP)\n      } else if (inputDirection === CONTROLLER_ENUM.TURNRIGHT && this.direction === DIRECTION_ENUM.BOTTOM) {\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.LEFT)\n      } else if (inputDirection === CONTROLLER_ENUM.TURNRIGHT && this.direction === DIRECTION_ENUM.RIGHT) {\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.BOTTOM)\n      }\n      return\n    }\n\n    this.move(inputDirection)\n  }\n\n  move(inputDirection: CONTROLLER_ENUM) {\n    EventManager.Instance.emit(EVENT_ENUM.RECORD_STEP)\n    if (inputDirection === CONTROLLER_ENUM.TOP) {\n      this.targetY -= 1\n      this.isMoving = true\n      this.showSmoke(DIRECTION_ENUM.TOP)\n    } else if (inputDirection === CONTROLLER_ENUM.BOTTOM) {\n      this.targetY += 1\n      this.isMoving = true\n      this.showSmoke(DIRECTION_ENUM.BOTTOM)\n    } else if (inputDirection === CONTROLLER_ENUM.LEFT) {\n      this.targetX -= 1\n      this.isMoving = true\n      this.showSmoke(DIRECTION_ENUM.LEFT)\n    } else if (inputDirection === CONTROLLER_ENUM.RIGHT) {\n      this.targetX += 1\n      this.isMoving = true\n      this.showSmoke(DIRECTION_ENUM.RIGHT)\n    } else if (inputDirection === CONTROLLER_ENUM.TURNLEFT) {\n      if (this.direction === DIRECTION_ENUM.TOP) {\n        this.direction = DIRECTION_ENUM.LEFT\n      } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n        this.direction = DIRECTION_ENUM.RIGHT\n      } else if (this.direction === DIRECTION_ENUM.LEFT) {\n        this.direction = DIRECTION_ENUM.BOTTOM\n      } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n        this.direction = DIRECTION_ENUM.TOP\n      }\n      this.state = ENTITY_STATE_ENUM.TURNLEFT\n      EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END)\n    } else if (inputDirection === CONTROLLER_ENUM.TURNRIGHT) {\n      if (this.direction === DIRECTION_ENUM.TOP) {\n        this.direction = DIRECTION_ENUM.RIGHT\n      } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n        this.direction = DIRECTION_ENUM.LEFT\n      } else if (this.direction === DIRECTION_ENUM.LEFT) {\n        this.direction = DIRECTION_ENUM.TOP\n      } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n        this.direction = DIRECTION_ENUM.BOTTOM\n      }\n      this.state = ENTITY_STATE_ENUM.TURNRIGHT\n      EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END)\n    }\n  }\n\n  showSmoke(type: DIRECTION_ENUM) {\n    EventManager.Instance.emit(EVENT_ENUM.SHOW_SMOKE, this.x, this.y, type)\n  }\n\n  willAttack(inputDirection: CONTROLLER_ENUM) {\n    const enemies = DataManager.Instance.enemies.filter(\n      (enemy: EnemyManager) => enemy.state !== ENTITY_STATE_ENUM.DEATH,\n    )\n    for (let i = 0; i < enemies.length; i++) {\n      const enemy = enemies[i]\n      const { x: enemyX, y: enemyY, id: enemyId } = enemy\n      if (\n        this.direction === DIRECTION_ENUM.TOP &&\n        inputDirection === CONTROLLER_ENUM.TOP &&\n        enemyY === this.targetY - 2 &&\n        enemyX === this.x\n      ) {\n        return enemyId\n      } else if (\n        this.direction === DIRECTION_ENUM.BOTTOM &&\n        inputDirection === CONTROLLER_ENUM.BOTTOM &&\n        enemyY === this.targetY + 2 &&\n        enemyX === this.x\n      ) {\n        return enemyId\n      } else if (\n        this.direction === DIRECTION_ENUM.LEFT &&\n        inputDirection === CONTROLLER_ENUM.LEFT &&\n        enemyX === this.targetX - 2 &&\n        enemyY === this.y\n      ) {\n        return enemyId\n      } else if (\n        this.direction === DIRECTION_ENUM.RIGHT &&\n        inputDirection === CONTROLLER_ENUM.RIGHT &&\n        enemyX === this.targetX + 2 &&\n        enemyY === this.y\n      ) {\n        return enemyId\n      }\n    }\n\n    return ''\n  }\n\n  willBlock(type: CONTROLLER_ENUM) {\n    const { targetX: x, targetY: y, direction } = this\n    const { tileInfo: tileInfo } = DataManager.Instance\n    const enemies: EnemyManager[] = DataManager.Instance.enemies.filter(\n      (enemy: EnemyManager) => enemy.state !== ENTITY_STATE_ENUM.DEATH,\n    )\n    const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.door || {}\n    const bursts: BurstManager[] = DataManager.Instance.bursts.filter(\n      (burst: BurstManager) => burst.state !== ENTITY_STATE_ENUM.DEATH,\n    )\n\n    const { mapRowCount: row, mapColumnCount: column } = DataManager.Instance\n\n    //按钮方向——向上\n    if (type === CONTROLLER_ENUM.TOP) {\n      const playerNextY = y - 1\n\n      //玩家方向——向上\n      if (direction === DIRECTION_ENUM.TOP) {\n        //判断是否超出地图\n        if (playerNextY < 0) {\n          this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        const weaponNextY = y - 2\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[x]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((doorX === x && doorY === playerNextY) || (doorX === x && doorY === weaponNextY)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        // 判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if ((enemyX === x && enemyY === weaponNextY) || (enemyX === x && enemyY === playerNextY)) {\n            this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        //玩家方向——向下\n      } else if (direction === DIRECTION_ENUM.BOTTOM) {\n        //判断是否超出地图\n        if (playerNextY < 0) {\n          this.state = ENTITY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        const weaponNextY = y\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[x]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((doorX === x && doorY === playerNextY) || (doorX === x && doorY === weaponNextY)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if (enemyX === x && enemyY === playerNextY) {\n            this.state = ENTITY_STATE_ENUM.BLOCKBACK\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //玩家方向——向左\n      } else if (direction === DIRECTION_ENUM.LEFT) {\n        //判断是否超出地图\n        if (playerNextY < 0) {\n          this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        const weaponNextX = x - 1\n        const weaponNextY = y - 1\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((doorX === x && doorY === playerNextY) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if ((enemyX === x && enemyY === playerNextY) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //玩家方向——向右\n      } else if (direction === DIRECTION_ENUM.RIGHT) {\n        //判断是否超出地图\n        if (playerNextY < 0) {\n          this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        const weaponNextX = x + 1\n        const weaponNextY = y - 1\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((doorX === x && doorY === playerNextY) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if ((enemyX === x && enemyY === playerNextY) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n            return true\n          }\n        }\n\n        // 判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n      }\n\n      //按钮方向——向下\n    } else if (type === CONTROLLER_ENUM.BOTTOM) {\n      const playerNextY = y + 1\n\n      //玩家方向——向上\n      if (direction === DIRECTION_ENUM.TOP) {\n        if (playerNextY > column - 1) {\n          this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n          return true\n        }\n\n        const weaponNextY = y\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[x]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((doorX === x && doorY === playerNextY) || (doorX === x && doorY === weaponNextY)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if (enemyX === x && enemyY === playerNextY) {\n            this.state = ENTITY_STATE_ENUM.BLOCKBACK\n            return true\n          }\n        }\n\n        // 判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //玩家方向——向下\n      } else if (direction === DIRECTION_ENUM.BOTTOM) {\n        if (playerNextY > column - 1) {\n          this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n          return true\n        }\n\n        const weaponNextY = y + 2\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[x]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((doorX === x && doorY === playerNextY) || (doorX === x && doorY === weaponNextY)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        // 判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if ((enemyX === x && enemyY === weaponNextY) || (enemyX === x && enemyY === playerNextY)) {\n            this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        //玩家方向——向左\n      } else if (direction === DIRECTION_ENUM.LEFT) {\n        if (playerNextY > column - 1) {\n          this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n          return true\n        }\n\n        const weaponNextX = x - 1\n        const weaponNextY = y + 1\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((doorX === x && doorY === playerNextY) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if ((enemyX === x && enemyY === playerNextY) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //玩家方向——向右\n      } else if (direction === DIRECTION_ENUM.RIGHT) {\n        if (playerNextY > column - 1) {\n          this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n          return true\n        }\n\n        const weaponNextX = x + 1\n        const weaponNextY = y + 1\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((doorX === x && doorY === playerNextY) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if ((enemyX === x && enemyY === playerNextY) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n      }\n\n      //按钮方向——向左\n    } else if (type === CONTROLLER_ENUM.LEFT) {\n      const playerNextX = x - 1\n\n      //玩家方向——向上\n      if (direction === DIRECTION_ENUM.TOP) {\n        //判断是否超出地图\n        if (playerNextX < 0) {\n          this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n          return true\n        }\n\n        const weaponNextX = x - 1\n        const weaponNextY = y - 1\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //玩家方向——向下\n      } else if (direction === DIRECTION_ENUM.BOTTOM) {\n        //判断是否超出地图\n        if (playerNextX < 0) {\n          this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n          return true\n        }\n\n        const weaponNextX = x - 1\n        const weaponNextY = y + 1\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //玩家方向——向左\n      } else if (direction === DIRECTION_ENUM.LEFT) {\n        //判断是否超出地图\n        if (playerNextX < 0) {\n          this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n          return true\n        }\n\n        const weaponNextX = x - 2\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[y]\n\n        //判断门\n        if (\n          ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === y)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === y)) {\n            this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        //玩家方向——向右\n      } else if (direction === DIRECTION_ENUM.RIGHT) {\n        //判断是否超出地图\n        if (playerNextX < 0) {\n          this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n          return true\n        }\n\n        const weaponNextX = x\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[y]\n\n        //判断门\n        if (\n          ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === y)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if (enemyX === playerNextX && enemyY === y) {\n            this.state = ENTITY_STATE_ENUM.BLOCKBACK\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n      }\n\n      //按钮方向——向右\n    } else if (type === CONTROLLER_ENUM.RIGHT) {\n      const playerNextX = x + 1\n\n      //玩家方向——向上\n      if (direction === DIRECTION_ENUM.TOP) {\n        if (playerNextX > row - 1) {\n          this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n          return true\n        }\n\n        const weaponNextX = x + 1\n        const weaponNextY = y - 1\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //玩家方向——向下\n      } else if (direction === DIRECTION_ENUM.BOTTOM) {\n        if (playerNextX > row - 1) {\n          this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n          return true\n        }\n\n        const weaponNextX = x + 1\n        const weaponNextY = y + 1\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //玩家方向——向左\n      } else if (direction === DIRECTION_ENUM.LEFT) {\n        if (playerNextX > row - 1) {\n          this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n          return true\n        }\n\n        const weaponNextX = x\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[y]\n\n        //判断门\n        if (\n          ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === y)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if (enemyX === playerNextX && enemyY === y) {\n            this.state = ENTITY_STATE_ENUM.BLOCKBACK\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //玩家方向——向右\n      } else if (direction === DIRECTION_ENUM.RIGHT) {\n        if (playerNextX > row - 1) {\n          this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n          return true\n        }\n\n        const weaponNextX = x + 2\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[y]\n\n        //判断门\n        if (\n          ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === y)) &&\n          doorState !== ENTITY_STATE_ENUM.DEATH\n        ) {\n          this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemies.length; i++) {\n          const enemy = enemies[i]\n          const { x: enemyX, y: enemyY } = enemy\n\n          if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === y)) {\n            this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n            return true\n          }\n        }\n\n        //判断地裂陷阱\n        if (\n          bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n      }\n\n      //按钮方向——左转\n    } else if (type === CONTROLLER_ENUM.TURNLEFT) {\n      let nextY, nextX\n      if (direction === DIRECTION_ENUM.TOP) {\n        //朝上左转的话，左上角三个tile都必须turnable为true，并且没有敌人\n        nextY = y - 1\n        nextX = x - 1\n      } else if (direction === DIRECTION_ENUM.BOTTOM) {\n        nextY = y + 1\n        nextX = x + 1\n      } else if (direction === DIRECTION_ENUM.LEFT) {\n        nextY = y + 1\n        nextX = x - 1\n      } else if (direction === DIRECTION_ENUM.RIGHT) {\n        nextY = y - 1\n        nextX = x + 1\n      }\n\n      //判断门\n      if (\n        ((doorX === x && doorY === nextY) ||\n          (doorX === nextX && doorY === y) ||\n          (doorX === nextX && doorY === nextY)) &&\n        doorState !== ENTITY_STATE_ENUM.DEATH\n      ) {\n        this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n        return true\n      }\n\n      //判断敌人\n      for (let i = 0; i < enemies.length; i++) {\n        const enemy = enemies[i]\n        const { x: enemyX, y: enemyY } = enemy\n\n        if (enemyX === nextX && enemyY === y) {\n          this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n          return true\n        } else if (enemyX === nextX && enemyY === nextY) {\n          this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n          return true\n        } else if (enemyX === x && enemyY === nextY) {\n          this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n          return true\n        }\n      }\n\n      //最后判断地图元素\n      if (\n        (!tileInfo[x]?.[nextY] || tileInfo[x]?.[nextY].turnable) &&\n        (!tileInfo[nextX]?.[y] || tileInfo[nextX]?.[y].turnable) &&\n        (!tileInfo[nextX]?.[nextY] || tileInfo[nextX]?.[nextY].turnable)\n      ) {\n        // empty\n      } else {\n        this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n        return true\n      }\n\n      //按钮方向——右转\n    } else if (type === CONTROLLER_ENUM.TURNRIGHT) {\n      let nextX, nextY\n      if (direction === DIRECTION_ENUM.TOP) {\n        //朝上右转的话，右上角三个tile都必须turnable为true\n        nextY = y - 1\n        nextX = x + 1\n      } else if (direction === DIRECTION_ENUM.BOTTOM) {\n        nextY = y + 1\n        nextX = x - 1\n      } else if (direction === DIRECTION_ENUM.LEFT) {\n        nextY = y - 1\n        nextX = x - 1\n      } else if (direction === DIRECTION_ENUM.RIGHT) {\n        nextY = y + 1\n        nextX = x + 1\n      }\n\n      //判断门\n      if (\n        ((doorX === x && doorY === nextY) ||\n          (doorX === nextX && doorY === y) ||\n          (doorX === nextX && doorY === nextY)) &&\n        doorState !== ENTITY_STATE_ENUM.DEATH\n      ) {\n        this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n        return true\n      }\n\n      //判断敌人\n      for (let i = 0; i < enemies.length; i++) {\n        const enemy = enemies[i]\n        const { x: enemyX, y: enemyY } = enemy\n\n        if (enemyX === nextX && enemyY === y) {\n          this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n          return true\n        } else if (enemyX === nextX && enemyY === nextY) {\n          this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n          return true\n        } else if (enemyX === x && enemyY === nextY) {\n          this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n          return true\n        }\n      }\n\n      //最后判断地图元素\n      if (\n        (!tileInfo[x]?.[nextY] || tileInfo[x]?.[nextY].turnable) &&\n        (!tileInfo[nextX]?.[y] || tileInfo[nextX]?.[y].turnable) &&\n        (!tileInfo[nextX]?.[nextY] || tileInfo[nextX]?.[nextY].turnable)\n      ) {\n        // empty\n      } else {\n        this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n        return true\n      }\n    }\n\n    return false\n  }\n}\n"]}