{"version":3,"sources":["file:///Users/lindanian/projects/git/cocos-creator-projects/practice/13-CrampedRoomOfDeath/assets/Scripts/Spikes/SpikesStateMachine.ts"],"names":["_decorator","Animation","ENTITY_TYPE_ENUM","FSM_PARAMS_TYPE_ENUM","PARAMS_NAME_ENUM","SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM","getInitParamsNumber","StateMachine","SpikesOneSubStateMachine","ccclass","property","SpikesStateMachine","restTrigger","_","item","params","type","TRIGGER","value","init","animationComponent","addComponent","initParams","initStateMachine","initAnimationEvent","Promise","all","waitingList","set","SPIKES_CURRENT_COUNT","SPIKES_TOTAL_COUNT","stateMachines","SPIKES_ONE","run","totalCount","getParams","currentState","get"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AAGhBC,MAAAA,gB,iBAAAA,gB;AACAC,MAAAA,oB,iBAAAA,oB;AACAC,MAAAA,gB,iBAAAA,gB;AACAC,MAAAA,gC,iBAAAA,gC;;AAEIC,MAAAA,mB,iBAAAA,mB;AAA2CC,MAAAA,Y,iBAAAA,Y;;AAC5CC,MAAAA,wB;;;;;;;OAED;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBV,U,GAE9B;;oCAIaW,kB,WADZF,OAAO,CAAC,oBAAD,C,gBAAR,MACaE,kBADb;AAAA;AAAA,wCACqD;AAEjDC,QAAAA,WAAW,GAAE;AACT,eAAI,IAAM,CAACC,CAAD,EAAIC,IAAJ,CAAV,IAAuB,KAAKC,MAA5B,EAAmC;AAC/B,gBAAGD,IAAI,CAACE,IAAL,KAAc;AAAA;AAAA,8DAAqBC,OAAtC,EAA8C;AAC1CH,cAAAA,IAAI,CAACI,KAAL,GAAa,KAAb;AACH;AACJ;AACJ;;AAEKC,QAAAA,IAAI,GAAE;AAAA;;AAAA;AACR,YAAA,KAAI,CAACC,kBAAL,GAA0B,KAAI,CAACC,YAAL,CAAkBpB,SAAlB,CAA1B;;AACA,YAAA,KAAI,CAACqB,UAAL;;AACA,YAAA,KAAI,CAACC,gBAAL;;AACA,YAAA,KAAI,CAACC,kBAAL;;AACA,kBAAMC,OAAO,CAACC,GAAR,CAAY,KAAI,CAACC,WAAjB,CAAN;AALQ;AAMX;;AAEDL,QAAAA,UAAU,GAAE;AACR,eAAKP,MAAL,CAAYa,GAAZ,CAAgB;AAAA;AAAA,oDAAiBC,oBAAjC,EAAuD;AAAA;AAAA,2DAAvD;AACA,eAAKd,MAAL,CAAYa,GAAZ,CAAgB;AAAA;AAAA,oDAAiBE,kBAAjC,EAAqD;AAAA;AAAA,2DAArD;AACH;;AAEDP,QAAAA,gBAAgB,GAAE;AACd,eAAKQ,aAAL,CAAmBH,GAAnB,CAAuB;AAAA;AAAA,oDAAiBI,UAAxC,EAAoD;AAAA;AAAA,oEAA6B,IAA7B,CAApD;AACH;;AAEDR,QAAAA,kBAAkB,GAAE,CAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDS,QAAAA,GAAG,GAAE;AACD,cAAMC,UAAU,GAAG,KAAKC,SAAL,CAAe;AAAA;AAAA,oDAAiBL,kBAAhC,CAAnB;;AACA,kBAAQ,KAAKM,YAAb;AACI,iBAAK,KAAKL,aAAL,CAAmBM,GAAnB,CAAuB;AAAA;AAAA,sDAAiBL,UAAxC,CAAL;AACI,kBAAGE,UAAU,KAAK;AAAA;AAAA,wFAAiCF,UAAnD,EAA8D;AAC1D,qBAAKI,YAAL,GAAoB,KAAKL,aAAL,CAAmBM,GAAnB,CAAuB;AAAA;AAAA,0DAAiBL,UAAxC,CAApB;AACH;;AACD;;AACJ;AACI,mBAAKI,YAAL,GAAoB,KAAKL,aAAL,CAAmBM,GAAnB,CAAuB;AAAA;AAAA,wDAAiBL,UAAxC,CAApB;AAPR;AASH;;AAhDgD,O","sourcesContent":["import {_decorator, Animation, AnimationClip, Component, SpriteFrame} from 'cc';\nimport {\n    ENTITY_STATE_ENUM,\n    ENTITY_TYPE_ENUM,\n    FSM_PARAMS_TYPE_ENUM,\n    PARAMS_NAME_ENUM,\n    SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM\n} from \"db://assets/Enums\";\nimport {getInitParamsNumber, getInitParamsTrigger, StateMachine} from \"db://assets/Base/StateMachine\";\nimport SpikesOneSubStateMachine from \"db://assets/Scripts/Spikes/SpikesOneSubStateMachine\";\n\nconst { ccclass, property } = _decorator;\n\n//自定义联合类型\ntype ParamsValueType = boolean | number;\n\n@ccclass('SpikesStateMachine')\nexport class SpikesStateMachine extends StateMachine {\n\n    restTrigger(){\n        for(const [_, item] of this.params){\n            if(item.type === FSM_PARAMS_TYPE_ENUM.TRIGGER){\n                item.value = false;\n            }\n        }\n    }\n\n    async init(){\n        this.animationComponent = this.addComponent(Animation);\n        this.initParams();\n        this.initStateMachine();\n        this.initAnimationEvent();\n        await Promise.all(this.waitingList);\n    }\n\n    initParams(){\n        this.params.set(PARAMS_NAME_ENUM.SPIKES_CURRENT_COUNT, getInitParamsNumber());\n        this.params.set(PARAMS_NAME_ENUM.SPIKES_TOTAL_COUNT, getInitParamsNumber());\n    }\n\n    initStateMachine(){\n        this.stateMachines.set(ENTITY_TYPE_ENUM.SPIKES_ONE, new SpikesOneSubStateMachine(this));\n    }\n\n    initAnimationEvent(){\n        // this.animationComponent.on(Animation.EventType.FINISHED, ()=> {\n        //     const name = this.animationComponent.defaultClip.name;\n        //     const whiteList = ['attack'];\n        //     if(whiteList.some(v=> name.includes(v))){\n        //         this.node.getComponent(EntityManager).state = ENTITY_STATE_ENUM.IDLE;\n        //     }\n        // });\n    }\n\n    run(){\n        const totalCount = this.getParams(PARAMS_NAME_ENUM.SPIKES_TOTAL_COUNT);\n        switch (this.currentState){\n            case this.stateMachines.get(ENTITY_TYPE_ENUM.SPIKES_ONE):\n                if(totalCount === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_ONE){\n                    this.currentState = this.stateMachines.get(ENTITY_TYPE_ENUM.SPIKES_ONE);\n                }\n                break;\n            default:\n                this.currentState = this.stateMachines.get(ENTITY_TYPE_ENUM.SPIKES_ONE);\n        }\n    }\n}\n\n"]}