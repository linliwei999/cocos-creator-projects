{"version":3,"sources":["file:///Users/lindanian/projects/git/cocos-creator-projects/practice/13-CrampedRoomOfDeath/assets/Scripts/Sence/BattleManager.ts"],"names":["_decorator","Component","TileMapManager","createUINode","Levels","DataManager","TILE_HEIGHT","TILE_WIDTH","EventManager","ENTITY_STATE_ENUM","ENTITY_TYPE_ENUM","EVENT_ENUM","PlayerManager","WoodenSkeletonManager","IronSkeletonManager","DoorManager","BurstManager","SpikesManager","SmokeManager","FadeManager","ShakeManager","ccclass","property","BattleManager","onLoad","Instance","levelIndex","on","NEXT_LEVEL","nextLevel","PLAYER_MOVE_END","checkArrivedDoor","SHOW_SMOKE","generateSmoke","onDestroy","off","start","generateStage","initLevel","level","fader","fadeIn","clearLevel","mapInfo","mapRowCount","length","mapColumnCount","Promise","all","generateTileMap","generateBursts","generateSpikes","generateSmokeLayer","generateDoor","generateEnemies","generatePlayer","fadeOut","player","x","playerX","y","playerY","door","doorX","doorY","state","doorState","DEATH","stage","destroyAllChildren","reset","setParent","node","addComponent","tileMap","tileManager","init","adaptPos","playerManager","emit","PLAYER_BORN","promise","i","enemies","enemy","Manager","type","SKELETON_WOODEN","manager","push","doorManager","bursts","burst","burstManager","spikes","spikesManager","smokeLayer","direction","item","smokes","find","smoke","console","log","IDLE","smokeManager","SMOKE","disX","disY","getComponent","stop","setPosition"],"mappings":"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","sourcesContent":["import {_decorator, Component, Node} from 'cc';\nimport {TileMapManager} from \"db://assets/Scripts/Tile/TileMapManager\";\nimport {createUINode} from \"db://assets/Utils\";\nimport Levels, {ILevel} from \"db://assets/Levels\";\nimport DataManager from \"db://assets/Runtime/DataManager\";\nimport {TILE_HEIGHT, TILE_WIDTH} from \"db://assets/Scripts/Tile/TileManager\";\nimport EventManager from \"db://assets/Runtime/EventManager\";\nimport {DIRECTION_ENUM, ENTITY_STATE_ENUM, ENTITY_TYPE_ENUM, EVENT_ENUM} from \"db://assets/Enums\";\nimport {PlayerManager} from \"db://assets/Scripts/Player/PlayerManager\";\nimport {WoodenSkeletonManager} from \"db://assets/Scripts/WoodenSkeleton/WoodenSkeletonManager\";\nimport {IronSkeletonManager} from \"db://assets/Scripts/IronSkeleton/IronSkeletonManager\";\nimport {DoorManager} from \"db://assets/Scripts/Door/DoorManager\";\nimport {BurstManager} from \"db://assets/Scripts/Burst/BurstManager\";\nimport {SpikesManager} from \"db://assets/Scripts/Spikes/SpikesManager\";\nimport {SmokeManager} from \"db://assets/Scripts/Smoke/SmokeManager\";\nimport FadeManager from \"db://assets/Runtime/FadeManager\";\nimport {ShakeManager} from \"db://assets/Scripts/UI/ShakeManager\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('BattleManager')\nexport class BattleManager extends Component {\n    // [1]\n    // dummy = '';\n\n    // [2]\n    // @property\n    // serializableDummy = 0;\n    level: ILevel\n    stage: Node\n    private smokeLayer: Node\n\n    onLoad(){\n        DataManager.Instance.levelIndex = 1;\n        EventManager.Instance.on(EVENT_ENUM.NEXT_LEVEL, this.nextLevel, this);\n        EventManager.Instance.on(EVENT_ENUM.PLAYER_MOVE_END, this.checkArrivedDoor, this);\n        EventManager.Instance.on(EVENT_ENUM.SHOW_SMOKE, this.generateSmoke, this);\n    }\n\n    onDestroy(){\n        EventManager.Instance.off(EVENT_ENUM.NEXT_LEVEL, this.nextLevel);\n        EventManager.Instance.off(EVENT_ENUM.PLAYER_MOVE_END, this.checkArrivedDoor);\n        EventManager.Instance.off(EVENT_ENUM.SHOW_SMOKE, this.generateSmoke);\n    }\n\n    start () {\n        this.generateStage();\n        this.initLevel();\n    }\n\n    async initLevel(){\n        const level = Levels[`level${DataManager.Instance.levelIndex}`];\n        if(level){\n            await FadeManager.Instance.fader.fadeIn();\n            this.clearLevel();\n            this.level = level;\n            //把地图数据存到数据中心(单例)\n            DataManager.Instance.mapInfo = this.level.mapInfo;\n            DataManager.Instance.mapRowCount = this.level.mapInfo.length || 0;\n            DataManager.Instance.mapColumnCount = this.level.mapInfo[0].length || 0;\n\n            await Promise.all([\n                this.generateTileMap(),\n                this.generateBursts(),\n                this.generateSpikes(),\n                this.generateSmokeLayer(),\n                this.generateDoor(),\n                this.generateEnemies(),\n                this.generatePlayer(),\n            ]);\n\n            await FadeManager.Instance.fader.fadeOut();\n        }\n    }\n\n    //是否切换下一关\n    checkArrivedDoor(){\n        const {\n            player: { x: playerX, y: playerY },\n            door: { x: doorX, y: doorY, state: doorState }\n        } = DataManager.Instance;\n        if(playerX === doorX && playerY === doorY && doorState === ENTITY_STATE_ENUM.DEATH){\n            this.nextLevel();\n        }\n    }\n\n    //下一关函数\n    nextLevel(){\n        DataManager.Instance.levelIndex++\n        this.initLevel();\n    }\n\n    clearLevel(){\n        this.stage.destroyAllChildren();\n        DataManager.Instance.reset();\n    }\n\n    generateStage(){\n        //创建舞台\n        this.stage = createUINode();\n        this.stage.setParent(this.node);\n        this.stage.addComponent(ShakeManager);\n    }\n\n    //生成地图\n    async generateTileMap(){\n        const tileMap = createUINode();\n        tileMap.setParent(this.stage);\n        const tileManager = tileMap.addComponent(TileMapManager);\n        await tileManager.init();\n        this.adaptPos();\n    }\n\n    //生成玩家\n    async generatePlayer(){\n        const player = createUINode();\n        player.setParent(this.stage);\n        const playerManager = player.addComponent(PlayerManager);\n        await playerManager.init(this.level.player);\n        DataManager.Instance.player = playerManager;\n        EventManager.Instance.emit(EVENT_ENUM.PLAYER_BORN, true);\n    }\n\n    //生成敌人\n    async generateEnemies(){\n        const promise = [];\n        for (let i = 0; i < this.level.enemies.length; i++) {\n            const enemy = this.level.enemies[i];\n            //生成木骷髅\n            const node = createUINode();\n            node.setParent(this.stage);\n            const Manager = enemy.type === ENTITY_TYPE_ENUM.SKELETON_WOODEN ? WoodenSkeletonManager : IronSkeletonManager;\n            const manager = node.addComponent(Manager);\n            promise.push(manager.init(enemy));\n            DataManager.Instance.enemies.push(manager);\n        }\n        await Promise.all(promise);\n    }\n\n    //生成门\n    async generateDoor(){\n        const door = createUINode();\n        door.setParent(this.stage);\n        const doorManager = door.addComponent(DoorManager);\n        await doorManager.init(this.level.door);\n        DataManager.Instance.door = doorManager;\n    }\n\n    //地裂瓦片\n    async generateBursts(){\n        const promise = [];\n        for (let i = 0; i < this.level.bursts.length; i++) {\n            const burst = this.level.bursts[i];\n            //生成木骷髅\n            const node = createUINode();\n            node.setParent(this.stage);\n            const burstManager = node.addComponent(BurstManager);\n            promise.push(burstManager.init(burst));\n            DataManager.Instance.bursts.push(burstManager);\n        }\n        await Promise.all(promise);\n    }\n\n    //地刺\n    async generateSpikes(){\n        const promise = [];\n        for (let i = 0; i < this.level.spikes.length; i++) {\n            const spikes = this.level.spikes[i];\n            //生成木骷髅\n            const node = createUINode();\n            node.setParent(this.stage);\n            const spikesManager = node.addComponent(SpikesManager);\n            promise.push(spikesManager.init(spikes));\n            DataManager.Instance.spikes.push(spikesManager);\n        }\n        await Promise.all(promise);\n    }\n\n    async generateSmokeLayer(){\n        this.smokeLayer = createUINode();\n        this.smokeLayer.setParent(this.stage);\n    }\n\n    //生成烟雾\n    async generateSmoke(x: number, y: number, direction: DIRECTION_ENUM){\n        //缓存池\n        const item = DataManager.Instance.smokes.find(smoke => smoke.state === ENTITY_STATE_ENUM.DEATH);\n        if(item){\n            console.log('smoke cache pool');\n           item.x = x;\n           item.y = y;\n           item.direction = direction;\n           // item.node.setPosition();\n           item.state = ENTITY_STATE_ENUM.IDLE;\n        }else {\n            const smoke = createUINode();\n            smoke.setParent(this.smokeLayer);\n            const smokeManager = smoke.addComponent(SmokeManager);\n            await smokeManager.init({\n                x,\n                y,\n                direction,\n                type: ENTITY_TYPE_ENUM.SMOKE,\n                state: ENTITY_STATE_ENUM.IDLE,\n            });\n            DataManager.Instance.smokes.push(smokeManager);\n        }\n    }\n\n    //瓦片地图适配屏幕\n    adaptPos () {\n        const { mapRowCount, mapColumnCount } = DataManager.Instance;\n        const disX = TILE_WIDTH * mapRowCount / 2;\n        const disY = TILE_HEIGHT * mapColumnCount / 2 + 80;\n        this.stage.getComponent(ShakeManager).stop();\n        this.stage.setPosition(-disX, disY);\n    }\n}\n\n"]}