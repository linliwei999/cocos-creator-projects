{"version":3,"sources":["file:///Users/lindanian/projects/git/cocos-creator-projects/practice/13-CrampedRoomOfDeath/assets/Scripts/Sence/BattleManager.ts"],"names":["_decorator","Component","director","TileMapManager","createUINode","Levels","DataManager","TILE_HEIGHT","TILE_WIDTH","EventManager","ENTITY_STATE_ENUM","ENTITY_TYPE_ENUM","EVENT_ENUM","SCENE_ENUM","PlayerManager","WoodenSkeletonManager","IronSkeletonManager","DoorManager","BurstManager","SpikesManager","SmokeManager","FadeManager","ShakeManager","ccclass","property","BattleManager","onLoad","Instance","levelIndex","on","NEXT_LEVEL","nextLevel","PLAYER_MOVE_END","checkArrivedDoor","SHOW_SMOKE","generateSmoke","RECORD_STEP","record","REVOKE_STEP","revoke","RESTART_LEVEL","initLevel","OUT_BATTLE","outBattle","onDestroy","off","start","generateStage","level","inited","fader","fadeIn","mask","clearLevel","mapInfo","mapRowCount","length","mapColumnCount","Promise","all","generateTileMap","generateBursts","generateSpikes","generateSmokeLayer","generateDoor","generateEnemies","generatePlayer","fadeOut","player","x","playerX","y","playerY","door","doorX","doorY","state","doorState","DEATH","loadScene","Start","stage","destroyAllChildren","reset","setParent","node","addComponent","tileMap","tileManager","init","adaptPos","playerManager","emit","PLAYER_BORN","promise","i","enemies","enemy","Manager","type","SKELETON_WOODEN","manager","push","doorManager","bursts","burst","burstManager","spikes","spikesManager","smokeLayer","direction","item","smokes","find","smoke","console","log","IDLE","smokeManager","SMOKE","disX","disY","getComponent","stop","setPosition","AIRDEATH","map","count","records","pop","targetX","targetY","one"],"mappings":"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","sourcesContent":["import {_decorator, Component, Node, director} from 'cc';\nimport {TileMapManager} from \"db://assets/Scripts/Tile/TileMapManager\";\nimport {createUINode} from \"db://assets/Utils\";\nimport Levels, {ILevel} from \"db://assets/Levels\";\nimport DataManager, {IRecord} from \"db://assets/Runtime/DataManager\";\nimport {TILE_HEIGHT, TILE_WIDTH} from \"db://assets/Scripts/Tile/TileManager\";\nimport EventManager from \"db://assets/Runtime/EventManager\";\nimport {DIRECTION_ENUM, ENTITY_STATE_ENUM, ENTITY_TYPE_ENUM, EVENT_ENUM, SCENE_ENUM} from \"db://assets/Enums\";\nimport {PlayerManager} from \"db://assets/Scripts/Player/PlayerManager\";\nimport {WoodenSkeletonManager} from \"db://assets/Scripts/WoodenSkeleton/WoodenSkeletonManager\";\nimport {IronSkeletonManager} from \"db://assets/Scripts/IronSkeleton/IronSkeletonManager\";\nimport {DoorManager} from \"db://assets/Scripts/Door/DoorManager\";\nimport {BurstManager} from \"db://assets/Scripts/Burst/BurstManager\";\nimport {SpikesManager} from \"db://assets/Scripts/Spikes/SpikesManager\";\nimport {SmokeManager} from \"db://assets/Scripts/Smoke/SmokeManager\";\nimport FadeManager from \"db://assets/Runtime/FadeManager\";\nimport {ShakeManager} from \"db://assets/Scripts/UI/ShakeManager\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('BattleManager')\nexport class BattleManager extends Component {\n    // [1]\n    // dummy = '';\n\n    // [2]\n    // @property\n    // serializableDummy = 0;\n    level: ILevel\n    stage: Node\n    private smokeLayer: Node\n    private inited: boolean = false\n\n    onLoad(){\n        DataManager.Instance.levelIndex = 1;\n        EventManager.Instance.on(EVENT_ENUM.NEXT_LEVEL, this.nextLevel, this);\n        EventManager.Instance.on(EVENT_ENUM.PLAYER_MOVE_END, this.checkArrivedDoor, this);\n        EventManager.Instance.on(EVENT_ENUM.SHOW_SMOKE, this.generateSmoke, this);\n        EventManager.Instance.on(EVENT_ENUM.RECORD_STEP, this.record, this);\n        EventManager.Instance.on(EVENT_ENUM.REVOKE_STEP, this.revoke, this);\n        EventManager.Instance.on(EVENT_ENUM.RESTART_LEVEL, this.initLevel, this);\n        EventManager.Instance.on(EVENT_ENUM.OUT_BATTLE, this.outBattle, this);\n    }\n\n    onDestroy(){\n        EventManager.Instance.off(EVENT_ENUM.NEXT_LEVEL, this.nextLevel);\n        EventManager.Instance.off(EVENT_ENUM.PLAYER_MOVE_END, this.checkArrivedDoor);\n        EventManager.Instance.off(EVENT_ENUM.SHOW_SMOKE, this.generateSmoke);\n        EventManager.Instance.off(EVENT_ENUM.RECORD_STEP, this.record);\n        EventManager.Instance.off(EVENT_ENUM.REVOKE_STEP, this.revoke);\n        EventManager.Instance.off(EVENT_ENUM.RESTART_LEVEL, this.initLevel);\n        EventManager.Instance.off(EVENT_ENUM.OUT_BATTLE, this.outBattle);\n    }\n\n    start () {\n        this.generateStage();\n        this.initLevel();\n    }\n\n    async initLevel(){\n        const level = Levels[`level${DataManager.Instance.levelIndex}`];\n        if(level){\n            if(this.inited){\n                await FadeManager.Instance.fader.fadeIn();\n            }else {\n                await FadeManager.Instance.fader.mask();\n            }\n            this.clearLevel();\n            this.level = level;\n            //把地图数据存到数据中心(单例)\n            DataManager.Instance.mapInfo = this.level.mapInfo;\n            DataManager.Instance.mapRowCount = this.level.mapInfo.length || 0;\n            DataManager.Instance.mapColumnCount = this.level.mapInfo[0].length || 0;\n\n            await Promise.all([\n                this.generateTileMap(),\n                this.generateBursts(),\n                this.generateSpikes(),\n                this.generateSmokeLayer(),\n                this.generateDoor(),\n                this.generateEnemies(),\n                this.generatePlayer(),\n            ]);\n\n            await FadeManager.Instance.fader.fadeOut();\n            this.inited = true;\n        }else {\n            await this.outBattle();\n        }\n    }\n\n    //是否切换下一关\n    checkArrivedDoor(){\n        const {\n            player: { x: playerX, y: playerY },\n            door: { x: doorX, y: doorY, state: doorState }\n        } = DataManager.Instance;\n        if(playerX === doorX && playerY === doorY && doorState === ENTITY_STATE_ENUM.DEATH){\n            this.nextLevel();\n        }\n    }\n\n    async outBattle(){\n      await FadeManager.Instance.fadeIn()\n        director.loadScene(SCENE_ENUM.Start);\n    }\n\n    //下一关函数\n    nextLevel(){\n        DataManager.Instance.levelIndex++\n        this.initLevel();\n    }\n\n    clearLevel(){\n        this.stage.destroyAllChildren();\n        DataManager.Instance.reset();\n    }\n\n    generateStage(){\n        //创建舞台\n        this.stage = createUINode();\n        this.stage.setParent(this.node);\n        this.stage.addComponent(ShakeManager);\n    }\n\n    //生成地图\n    async generateTileMap(){\n        const tileMap = createUINode();\n        tileMap.setParent(this.stage);\n        const tileManager = tileMap.addComponent(TileMapManager);\n        await tileManager.init();\n        this.adaptPos();\n    }\n\n    //生成玩家\n    async generatePlayer(){\n        const player = createUINode();\n        player.setParent(this.stage);\n        const playerManager = player.addComponent(PlayerManager);\n        await playerManager.init(this.level.player);\n        DataManager.Instance.player = playerManager;\n        EventManager.Instance.emit(EVENT_ENUM.PLAYER_BORN, true);\n    }\n\n    //生成敌人\n    async generateEnemies(){\n        const promise = [];\n        for (let i = 0; i < this.level.enemies.length; i++) {\n            const enemy = this.level.enemies[i];\n            //生成木骷髅\n            const node = createUINode();\n            node.setParent(this.stage);\n            const Manager = enemy.type === ENTITY_TYPE_ENUM.SKELETON_WOODEN ? WoodenSkeletonManager : IronSkeletonManager;\n            const manager = node.addComponent(Manager);\n            promise.push(manager.init(enemy));\n            DataManager.Instance.enemies.push(manager);\n        }\n        await Promise.all(promise);\n    }\n\n    //生成门\n    async generateDoor(){\n        const door = createUINode();\n        door.setParent(this.stage);\n        const doorManager = door.addComponent(DoorManager);\n        await doorManager.init(this.level.door);\n        DataManager.Instance.door = doorManager;\n    }\n\n    //地裂瓦片\n    async generateBursts(){\n        const promise = [];\n        for (let i = 0; i < this.level.bursts.length; i++) {\n            const burst = this.level.bursts[i];\n            //生成木骷髅\n            const node = createUINode();\n            node.setParent(this.stage);\n            const burstManager = node.addComponent(BurstManager);\n            promise.push(burstManager.init(burst));\n            DataManager.Instance.bursts.push(burstManager);\n        }\n        await Promise.all(promise);\n    }\n\n    //地刺\n    async generateSpikes(){\n        const promise = [];\n        for (let i = 0; i < this.level.spikes.length; i++) {\n            const spikes = this.level.spikes[i];\n            //生成木骷髅\n            const node = createUINode();\n            node.setParent(this.stage);\n            const spikesManager = node.addComponent(SpikesManager);\n            promise.push(spikesManager.init(spikes));\n            DataManager.Instance.spikes.push(spikesManager);\n        }\n        await Promise.all(promise);\n    }\n\n    async generateSmokeLayer(){\n        this.smokeLayer = createUINode();\n        this.smokeLayer.setParent(this.stage);\n    }\n\n    //生成烟雾\n    async generateSmoke(x: number, y: number, direction: DIRECTION_ENUM){\n        //缓存池\n        const item = DataManager.Instance.smokes.find(smoke => smoke.state === ENTITY_STATE_ENUM.DEATH);\n        if(item){\n            console.log('smoke cache pool');\n           item.x = x;\n           item.y = y;\n           item.direction = direction;\n           // item.node.setPosition();\n           item.state = ENTITY_STATE_ENUM.IDLE;\n        }else {\n            const smoke = createUINode();\n            smoke.setParent(this.smokeLayer);\n            const smokeManager = smoke.addComponent(SmokeManager);\n            await smokeManager.init({\n                x,\n                y,\n                direction,\n                type: ENTITY_TYPE_ENUM.SMOKE,\n                state: ENTITY_STATE_ENUM.IDLE,\n            });\n            DataManager.Instance.smokes.push(smokeManager);\n        }\n    }\n\n    //瓦片地图适配屏幕\n    adaptPos () {\n        const { mapRowCount, mapColumnCount } = DataManager.Instance;\n        const disX = TILE_WIDTH * mapRowCount / 2;\n        const disY = TILE_HEIGHT * mapColumnCount / 2 + 80;\n        this.stage.getComponent(ShakeManager).stop();\n        this.stage.setPosition(-disX, disY);\n    }\n\n    //保存数据 -> 记录玩家移动数据\n    record(){\n        const item: IRecord = {\n            player: {\n                x: DataManager.Instance.player.x,\n                y: DataManager.Instance.player.y,\n                direction: DataManager.Instance.player.direction,\n                type: DataManager.Instance.player.type,\n                state: (DataManager.Instance.player.state === ENTITY_STATE_ENUM.IDLE || DataManager.Instance.player.state === ENTITY_STATE_ENUM.DEATH || DataManager.Instance.player.state === ENTITY_STATE_ENUM.AIRDEATH) ? DataManager.Instance.player.state : ENTITY_STATE_ENUM.IDLE,\n            },\n            door: {\n                x: DataManager.Instance.door.x,\n                y: DataManager.Instance.door.y,\n                direction: DataManager.Instance.door.direction,\n                type: DataManager.Instance.door.type,\n                state: DataManager.Instance.door.state,\n            },\n            enemies: DataManager.Instance.enemies.map(({x, y, direction, type, state}) =>({\n                x,\n                y,\n                direction,\n                type,\n                state,\n            })),\n            bursts: DataManager.Instance.bursts.map(({x, y, direction, type, state}) =>({\n                x,\n                y,\n                direction,\n                type,\n                state,\n            })),\n            spikes: DataManager.Instance.spikes.map(({x, y, count, type}) =>({\n                x,\n                y,\n                count,\n                type,\n            })),\n        };\n        DataManager.Instance.records.push(item);\n    }\n\n    //撤回\n    revoke(){\n        const item = DataManager.Instance.records.pop();\n        if(item){\n            //疑问\n            // DataManager.Instance.player = item.player\n            DataManager.Instance.player.x = DataManager.Instance.player.targetX = item.player.x;\n            DataManager.Instance.player.y = DataManager.Instance.player.targetY = item.player.y;\n            DataManager.Instance.player.direction = item.player.direction;\n            DataManager.Instance.player.state = item.player.state;\n\n            DataManager.Instance.door.x = item.door.x;\n            DataManager.Instance.door.y = item.door.y;\n            DataManager.Instance.door.direction = item.door.direction;\n            DataManager.Instance.door.state = item.door.state;\n\n            for (let i = 0; i < DataManager.Instance.enemies.length; i++) {\n                // const enemy = DataManager.Instance.enemies[i];\n                const enemy = item.enemies[i];\n                DataManager.Instance.enemies[i].x = enemy.x;\n                DataManager.Instance.enemies[i].y = enemy.y;\n                DataManager.Instance.enemies[i].type = enemy.type;\n                DataManager.Instance.enemies[i].direction = enemy.direction;\n                DataManager.Instance.enemies[i].state = enemy.state;\n            }\n\n            for (let i = 0; i < DataManager.Instance.bursts.length; i++) {\n                const burst = item.bursts[i];\n                DataManager.Instance.bursts[i].x = burst.x;\n                DataManager.Instance.bursts[i].y = burst.y;\n                DataManager.Instance.bursts[i].type = burst.type;\n                DataManager.Instance.bursts[i].state = burst.state;\n            }\n\n            for (let i = 0; i < DataManager.Instance.spikes.length; i++) {\n                const one = item.spikes[i];\n                DataManager.Instance.spikes[i].x = one.x;\n                DataManager.Instance.spikes[i].y = one.y;\n                DataManager.Instance.spikes[i].type = one.type;\n                DataManager.Instance.spikes[i].count = one.count;\n            }\n        }\n    }\n\n}\n\n"]}