{"version":3,"sources":["file:///Users/lindanian/projects/git/cocos-creator-projects/practice/13-CrampedRoomOfDeath/assets/Scripts/Sence/BattleManager.ts"],"names":["_decorator","Component","TileMapManager","createUINode","Levels","DataManager","TILE_HEIGHT","TILE_WIDTH","EventManager","ENTITY_STATE_ENUM","ENTITY_TYPE_ENUM","EVENT_ENUM","PlayerManager","WoodenSkeletonManager","IronSkeletonManager","DoorManager","BurstManager","SpikesManager","SmokeManager","ccclass","property","BattleManager","onLoad","Instance","levelIndex","on","NEXT_LEVEL","nextLevel","PLAYER_MOVE_END","checkArrivedDoor","SHOW_SMOKE","generateSmoke","onDestroy","off","start","generateStage","initLevel","level","clearLevel","mapInfo","mapRowCount","length","mapColumnCount","generateTileMap","player","x","playerX","y","playerY","door","doorX","doorY","state","doorState","DEATH","stage","destroyAllChildren","reset","setParent","node","tileMap","tileManager","addComponent","init","adaptPos","generateBursts","generateSpikes","generateSmokeLayer","generateDoor","generateEnemies","generatePlayer","playerManager","emit","PLAYER_BORN","promise","i","enemies","enemy","Manager","type","SKELETON_WOODEN","manager","push","Promise","all","doorManager","bursts","burst","burstManager","spikes","spikesManager","smokeLayer","direction","smoke","smokeManager","SMOKE","IDLE","smokes","disX","disY","setPosition"],"mappings":"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","sourcesContent":["import {_decorator, Component, Node} from 'cc';\nimport {TileMapManager} from \"db://assets/Scripts/Tile/TileMapManager\";\nimport {createUINode} from \"db://assets/Utils\";\nimport Levels, {ILevel} from \"db://assets/Levels\";\nimport DataManager from \"db://assets/Runtime/DataManager\";\nimport {TILE_HEIGHT, TILE_WIDTH} from \"db://assets/Scripts/Tile/TileManager\";\nimport EventManager from \"db://assets/Runtime/EventManager\";\nimport {DIRECTION_ENUM, ENTITY_STATE_ENUM, ENTITY_TYPE_ENUM, EVENT_ENUM} from \"db://assets/Enums\";\nimport {PlayerManager} from \"db://assets/Scripts/Player/PlayerManager\";\nimport {WoodenSkeletonManager} from \"db://assets/Scripts/WoodenSkeleton/WoodenSkeletonManager\";\nimport {IronSkeletonManager} from \"db://assets/Scripts/IronSkeleton/IronSkeletonManager\";\nimport {DoorManager} from \"db://assets/Scripts/Door/DoorManager\";\nimport {BurstManager} from \"db://assets/Scripts/Burst/BurstManager\";\nimport {SpikesManager} from \"db://assets/Scripts/Spikes/SpikesManager\";\nimport {SmokeManager} from \"db://assets/Scripts/Smoke/SmokeManager\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('BattleManager')\nexport class BattleManager extends Component {\n    // [1]\n    // dummy = '';\n\n    // [2]\n    // @property\n    // serializableDummy = 0;\n    level: ILevel\n    stage: Node\n    private smokeLayer: Node\n\n    onLoad(){\n        DataManager.Instance.levelIndex = 1;\n        EventManager.Instance.on(EVENT_ENUM.NEXT_LEVEL, this.nextLevel, this);\n        EventManager.Instance.on(EVENT_ENUM.PLAYER_MOVE_END, this.checkArrivedDoor, this);\n        EventManager.Instance.on(EVENT_ENUM.SHOW_SMOKE, this.generateSmoke, this);\n    }\n\n    onDestroy(){\n        EventManager.Instance.off(EVENT_ENUM.NEXT_LEVEL, this.nextLevel);\n        EventManager.Instance.off(EVENT_ENUM.PLAYER_MOVE_END, this.checkArrivedDoor);\n        EventManager.Instance.off(EVENT_ENUM.SHOW_SMOKE, this.generateSmoke);\n    }\n\n    start () {\n        this.generateStage();\n        this.initLevel();\n    }\n\n    initLevel(){\n        const level = Levels[`level${DataManager.Instance.levelIndex}`];\n        if(level){\n            this.clearLevel();\n            this.level = level;\n            //把地图数据存到数据中心(单例)\n            DataManager.Instance.mapInfo = this.level.mapInfo;\n            DataManager.Instance.mapRowCount = this.level.mapInfo.length || 0;\n            DataManager.Instance.mapColumnCount = this.level.mapInfo[0].length || 0;\n            this.generateTileMap();\n            // this.generateDoor();\n            // this.generatePlayer();\n            // this.generateEnemies();\n        }\n    }\n\n    //是否切换下一关\n    checkArrivedDoor(){\n        const {\n            player: { x: playerX, y: playerY },\n            door: { x: doorX, y: doorY, state: doorState }\n        } = DataManager.Instance;\n        if(playerX === doorX && playerY === doorY && doorState === ENTITY_STATE_ENUM.DEATH){\n            this.nextLevel();\n        }\n    }\n\n    //下一关函数\n    nextLevel(){\n        DataManager.Instance.levelIndex++\n        this.initLevel();\n    }\n\n    clearLevel(){\n        this.stage.destroyAllChildren();\n        DataManager.Instance.reset();\n    }\n\n    generateStage(){\n        //创建舞台\n        this.stage = createUINode();\n        this.stage.setParent(this.node);\n    }\n\n    //生成地图\n    async generateTileMap(){\n        const tileMap = createUINode();\n        tileMap.setParent(this.stage);\n        const tileManager = tileMap.addComponent(TileMapManager);\n        await tileManager.init();\n        this.adaptPos();\n        this.generateBursts();\n        this.generateSpikes();\n        this.generateSmokeLayer();\n        this.generateDoor();\n        this.generateEnemies();\n        this.generatePlayer();\n    }\n\n    //生成玩家\n    async generatePlayer(){\n        const player = createUINode();\n        player.setParent(this.stage);\n        const playerManager = player.addComponent(PlayerManager);\n        await playerManager.init(this.level.player);\n        DataManager.Instance.player = playerManager;\n        EventManager.Instance.emit(EVENT_ENUM.PLAYER_BORN, true);\n    }\n\n    //生成敌人\n    async generateEnemies(){\n        const promise = [];\n        for (let i = 0; i < this.level.enemies.length; i++) {\n            const enemy = this.level.enemies[i];\n            //生成木骷髅\n            const node = createUINode();\n            node.setParent(this.stage);\n            const Manager = enemy.type === ENTITY_TYPE_ENUM.SKELETON_WOODEN ? WoodenSkeletonManager : IronSkeletonManager;\n            const manager = node.addComponent(Manager);\n            promise.push(manager.init(enemy));\n            DataManager.Instance.enemies.push(manager);\n        }\n        await Promise.all(promise);\n    }\n\n    //生成门\n    async generateDoor(){\n        const door = createUINode();\n        door.setParent(this.stage);\n        const doorManager = door.addComponent(DoorManager);\n        await doorManager.init(this.level.door);\n        DataManager.Instance.door = doorManager;\n    }\n\n    //地裂瓦片\n    async generateBursts(){\n        const promise = [];\n        for (let i = 0; i < this.level.bursts.length; i++) {\n            const burst = this.level.bursts[i];\n            //生成木骷髅\n            const node = createUINode();\n            node.setParent(this.stage);\n            const burstManager = node.addComponent(BurstManager);\n            promise.push(burstManager.init(burst));\n            DataManager.Instance.bursts.push(burstManager);\n        }\n        await Promise.all(promise);\n    }\n\n    //地刺\n    async generateSpikes(){\n        const promise = [];\n        for (let i = 0; i < this.level.spikes.length; i++) {\n            const spikes = this.level.spikes[i];\n            //生成木骷髅\n            const node = createUINode();\n            node.setParent(this.stage);\n            const spikesManager = node.addComponent(SpikesManager);\n            promise.push(spikesManager.init(spikes));\n            DataManager.Instance.spikes.push(spikesManager);\n        }\n        await Promise.all(promise);\n    }\n\n    generateSmokeLayer(){\n        this.smokeLayer = createUINode();\n        this.smokeLayer.setParent(this.stage);\n    }\n\n    //生成烟雾\n    async generateSmoke(x: number, y: number, direction: DIRECTION_ENUM){\n        const smoke = createUINode();\n        smoke.setParent(this.smokeLayer);\n        const smokeManager = smoke.addComponent(SmokeManager);\n        await smokeManager.init({\n            x,\n            y,\n            direction,\n            type: ENTITY_TYPE_ENUM.SMOKE,\n            state: ENTITY_STATE_ENUM.IDLE,\n        });\n        DataManager.Instance.smokes.push(smokeManager);\n    }\n\n    //瓦片地图适配屏幕\n    adaptPos () {\n        const { mapRowCount, mapColumnCount } = DataManager.Instance;\n        const disX = TILE_WIDTH * mapRowCount / 2;\n        const disY = TILE_HEIGHT * mapColumnCount / 2 + 80;\n        this.stage.setPosition(-disX, disY);\n    }\n}\n\n"]}