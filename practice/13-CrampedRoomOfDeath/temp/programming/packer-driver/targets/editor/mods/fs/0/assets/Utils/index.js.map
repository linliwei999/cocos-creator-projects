{"version":3,"sources":["file:///Users/lindanian/projects/git/cocos-creator-projects/practice/13-CrampedRoomOfDeath/assets/Utils/index.ts"],"names":["Node","UITransform","Layers","createUINode","name","node","transform","addComponent","setAnchorPoint","layer","nameToLayer","randomByRange","start","end","Math","floor","random","reg","getNumberWithinString","str","parseInt","match","sortSpriteFrame","spriteFrames","sort","a","b","randomStringByLength","length","Array","from","reduce","total","item"],"mappings":";;;;;;;;AAASA,MAAAA,I,OAAAA,I;AAAMC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,M,OAAAA,M;;;;;;;8BAEfC,Y,GAAe,CAACC,IAAY,GAAG,EAAhB,KAAsB;AAC9C,cAAMC,IAAI,GAAG,IAAIL,IAAJ,EAAb;AACA,cAAMM,SAAS,GAAGD,IAAI,CAACE,YAAL,CAAkBN,WAAlB,CAAlB;AACAK,QAAAA,SAAS,CAACE,cAAV,CAAyB,CAAzB,EAA4B,CAA5B;AACAH,QAAAA,IAAI,CAACI,KAAL,GAAa,KAAKP,MAAM,CAACQ,WAAP,CAAmB,OAAnB,CAAlB;AACA,eAAOL,IAAP;AACH,O;;+BAEYM,a,GAAgB,CAACC,KAAD,EAAgBC,GAAhB,KAA+B;AACxD,eAAOC,IAAI,CAACC,KAAL,CAAWH,KAAK,GAAG,CAACC,GAAG,GAAGD,KAAP,IAAgBE,IAAI,CAACE,MAAL,EAAnC,CAAP;AACH,O;;AAEKC,MAAAA,G,GAAM,W;;AAENC,MAAAA,qB,GAAyBC,GAAD,IAAgB;AAC1C,eAAOC,QAAQ,CAACD,GAAG,CAACE,KAAJ,CAAUJ,GAAV,EAAe,CAAf,CAAD,CAAR,IAA+B,CAAtC;AACH,O;;iCAEYK,e,GAAmBC,YAAD,IAAgC;AAC3D,eAAOA,YAAY,CAACC,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAASR,qBAAqB,CAACO,CAAC,CAACrB,IAAH,CAArB,GAAgCc,qBAAqB,CAACQ,CAAC,CAACtB,IAAH,CAAhF,CAAP;AACH,O;;sCAEYuB,oB,GAAwBC,MAAD,IAAmB;AACnD,eAAOC,KAAK,CAACC,IAAN,CAAW;AAAEF,UAAAA;AAAF,SAAX,EAAuBG,MAAvB,CAAsC,CAACC,KAAD,EAAQC,IAAR,KAAgBD,KAAK,GAAGlB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAA9D,EAA8F,EAA9F,CAAP;AACH,O","sourcesContent":["import { Node, UITransform, Layers, SpriteFrame } from 'cc';\n\nexport const createUINode = (name: string = '') =>{\n    const node = new Node();\n    const transform = node.addComponent(UITransform);\n    transform.setAnchorPoint(0, 1);\n    node.layer = 1 << Layers.nameToLayer(\"UI_2D\");\n    return node;\n}\n\nexport const randomByRange = (start: number, end: number) =>{\n    return Math.floor(start + (end - start) * Math.random());\n}\n\nconst reg = /\\((\\d+)\\)/;\n\nconst getNumberWithinString = (str: string) =>{\n    return parseInt(str.match(reg)[1]) || 0;\n}\n\nexport const sortSpriteFrame = (spriteFrames: SpriteFrame[]) =>{\n    return spriteFrames.sort((a, b)=> getNumberWithinString(a.name) - getNumberWithinString(b.name));\n}\n\nexport const randomStringByLength = (length: number) =>{\n    return Array.from({ length }).reduce<string>((total, item)=> total + Math.floor(Math.random() * 10), '');\n}"]}