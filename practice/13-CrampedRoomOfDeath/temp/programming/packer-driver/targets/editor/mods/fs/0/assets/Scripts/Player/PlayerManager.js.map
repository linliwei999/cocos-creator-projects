{"version":3,"sources":["file:///Users/lindanian/projects/git/cocos-creator-projects/practice/13-CrampedRoomOfDeath/assets/Scripts/Player/PlayerManager.ts"],"names":["_decorator","CONTROLLER_ENUM","DIRECTION_ENUM","ENTITY_STATE_ENUM","EVENT_ENUM","EventManager","PlayerStateMachine","EntityManager","DataManager","ccclass","property","ANIMATION_SPEED","PlayerManager","init","params","fsm","node","addComponent","targetX","x","targetY","y","Instance","on","PLAYER_CTRL","inputHandle","ATTACK_PLAYER","onDied","updateXY","speed","Math","abs","isMoving","emit","PLAYER_MOVE_END","inputDirection","enemyId","willAttack","state","DEATH","willBlock","console","log","move","onAttack","ATTACK","ATTACK_ENEMY","DOOR_OPEN","enemies","filter","item","i","length","enemyX","enemyY","id","enemyState","TOP","direction","LEFT","RIGHT","BOTTOM","tileInfo","playerNextY","weaponNextY","BLOCKFRONT","playerTile","weaponTile","moveable","turnable","weaponNextX","TURNLEFT","nextX","nextY","BLOCKTURNLEFT","TURNRIGHT","type","update"],"mappings":"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","sourcesContent":["import {_decorator} from 'cc';\nimport {CONTROLLER_ENUM, DIRECTION_ENUM, ENTITY_STATE_ENUM, ENTITY_TYPE_ENUM, EVENT_ENUM} from \"db://assets/Enums\";\nimport EventManager from \"db://assets/Runtime/EventManager\";\nimport {PlayerStateMachine} from \"db://assets/Scripts/Player/PlayerStateMachine\";\nimport {EntityManager} from \"db://assets/Base/EntityManager\";\nimport DataManager from \"db://assets/Runtime/DataManager\";\nimport {IEntity} from \"db://assets/Levels\";\n\nconst { ccclass, property } = _decorator;\n\nconst ANIMATION_SPEED = 1/8;\n\n@ccclass('PlayerManager')\nexport class PlayerManager extends EntityManager {\n    targetX:number = 0\n    targetY:number = 0\n    isMoving: boolean = false\n    private readonly speed = ANIMATION_SPEED\n    // private testAttackCount = 0\n\n    async init(params: IEntity){\n        this.fsm = this.node.addComponent(PlayerStateMachine);\n        await this.fsm.init();\n        super.init(params);\n        this.targetX = this.x;\n        this.targetY = this.y;\n        EventManager.Instance.on(EVENT_ENUM.PLAYER_CTRL, this.inputHandle, this);\n        EventManager.Instance.on(EVENT_ENUM.ATTACK_PLAYER, this.onDied, this);\n    }\n\n    updateXY(){\n        if(this.targetX < this.x){\n            this.x -= this.speed\n        }else if(this.targetX > this.x){\n            this.x += this.speed\n        }\n\n        if(this.targetY < this.y){\n            this.y -= this.speed\n        }else if(this.targetY > this.y){\n            this.y += this.speed\n        }\n\n        if(Math.abs(this.targetX - this.x) < 0.1 && Math.abs(this.targetY - this.y) < 0.1 && this.isMoving){\n            this.x = this.targetX;\n            this.y = this.targetY;\n            this.isMoving = false;\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\n        }\n    }\n\n    inputHandle(inputDirection: CONTROLLER_ENUM){\n        //攻击\n        const enemyId = this.willAttack(inputDirection);\n        if(enemyId){\n            return;\n        }\n\n        if(this.state === ENTITY_STATE_ENUM.DEATH){\n            return;\n        }\n\n        if(this.willBlock(inputDirection)){\n            console.log('撞墙');\n            return\n        }\n        this.move(inputDirection);\n    }\n\n    onAttack(enemyId: string){\n        if(enemyId){\n            this.state = ENTITY_STATE_ENUM.ATTACK;\n            EventManager.Instance.emit(EVENT_ENUM.ATTACK_ENEMY, enemyId);\n            EventManager.Instance.emit(EVENT_ENUM.DOOR_OPEN);\n        }\n        return enemyId;\n    }\n\n    willAttack(inputDirection: CONTROLLER_ENUM){\n        const enemies = DataManager.Instance.enemies.filter((item)=> item.state !== ENTITY_STATE_ENUM.DEATH);\n        for (let i = 0; i < enemies.length; i++) {\n            const { x: enemyX, y: enemyY, id: enemyId, state: enemyState } = enemies[i];\n            if(inputDirection === CONTROLLER_ENUM.TOP && this.direction === DIRECTION_ENUM.TOP && enemyX === this.x && enemyY === this.targetY - 2){\n                console.log('玩家攻击');\n                return this.onAttack(enemyId);\n            }else if(inputDirection === CONTROLLER_ENUM.LEFT && this.direction === DIRECTION_ENUM.LEFT && enemyX === this.targetX - 2 && enemyY === this.y){\n                return this.onAttack(enemyId);\n            }else if(inputDirection === CONTROLLER_ENUM.RIGHT && this.direction === DIRECTION_ENUM.RIGHT && enemyX === this.targetX + 2 && enemyY === this.y){\n                // this.testAttackCount++\n                // if(this.testAttackCount === 3){\n                //     return false;\n                // }\n                return this.onAttack(enemyId);\n            }else if(inputDirection === CONTROLLER_ENUM.BOTTOM && this.direction === DIRECTION_ENUM.BOTTOM && enemyX === this.x && enemyY === this.targetY + 2){\n                return this.onAttack(enemyId);\n            }else {\n                return '';\n            }\n        }\n    }\n\n    willBlock(inputDirection: CONTROLLER_ENUM){\n        const { targetX: x, targetY: y, direction } = this;\n        const { tileInfo } = DataManager.Instance;\n        if(inputDirection === CONTROLLER_ENUM.TOP){\n            if(direction === DIRECTION_ENUM.TOP){\n                //疑问\n                const playerNextY = y - 1;\n                const weaponNextY = y - 2;\n                //玩家走出地图\n                if(playerNextY <= 1){\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\n                    return true;\n                }\n                //下一个瓦片\n                const playerTile = tileInfo[x][playerNextY];\n                const weaponTile = tileInfo[x][weaponNextY];\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\n                    //empty\n                }else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\n                    return true;\n                }\n            }else if(direction === DIRECTION_ENUM.LEFT){\n                //左方向移动\n                const playerNextY = y - 1;\n                const weaponNextX = x - 1;\n                const weaponNextY = playerNextY;\n                //下一个瓦片\n                const playerTile = tileInfo[x][playerNextY];\n                const weaponTile = tileInfo[weaponNextX][weaponNextY];\n                if(playerTile?.moveable && weaponTile.moveable){\n                    //empty\n                }else {\n                    return true;\n                }\n            }else if(direction === DIRECTION_ENUM.RIGHT){\n                //右方向移动\n                const playerNextY = y - 1;\n                const weaponNextX = x + 1;\n                const weaponNextY = playerNextY;\n                //下一个瓦片\n                const playerTile = tileInfo[x][playerNextY];\n                const weaponTile = tileInfo[weaponNextX][weaponNextY];\n                if(playerTile?.moveable && weaponTile.moveable){\n                    //empty\n                }else {\n                    return true;\n                }\n            }\n        }else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\n            let nextX\n            let nextY\n            if(direction === DIRECTION_ENUM.TOP){\n                nextX = x - 1;\n                nextY = y - 1;\n            }else if(direction === DIRECTION_ENUM.BOTTOM){\n                nextX = x + 1;\n                nextY = y + 1;\n            }else if(direction === DIRECTION_ENUM.LEFT){\n                nextX = x - 1;\n                nextY = y + 1;\n            }else if(direction === DIRECTION_ENUM.RIGHT){\n                nextX = x + 1;\n                nextY = y - 1;\n            }\n            if(\n                (!tileInfo[x][nextY] || tileInfo[x][nextY].turnable) &&\n                (!tileInfo[nextX][y] || tileInfo[nextX][y].turnable) &&\n                (!tileInfo[nextX][nextY] || tileInfo[nextX][nextY].turnable)\n            ){\n                //empty\n            }else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //玩家移动\n    move(inputDirection: CONTROLLER_ENUM){\n        if (inputDirection === CONTROLLER_ENUM.TOP){\n            this.targetY -=1\n        }else if(inputDirection === CONTROLLER_ENUM.BOTTOM){\n            this.targetY +=1\n        }else if(inputDirection === CONTROLLER_ENUM.LEFT){\n            this.targetX -=1\n        }else if(inputDirection === CONTROLLER_ENUM.RIGHT){\n            this.targetX +=1\n        }else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\n            if(this.direction === DIRECTION_ENUM.TOP){\n                this.direction = DIRECTION_ENUM.LEFT;\n            }else if(this.direction === DIRECTION_ENUM.LEFT){\n                this.direction = DIRECTION_ENUM.BOTTOM;\n            }else if(this.direction === DIRECTION_ENUM.BOTTOM){\n                this.direction = DIRECTION_ENUM.RIGHT;\n            }else if(this.direction === DIRECTION_ENUM.RIGHT){\n                this.direction = DIRECTION_ENUM.TOP;\n            }\n            this.state = ENTITY_STATE_ENUM.TURNLEFT;\n        }\n        if(!(inputDirection === CONTROLLER_ENUM.TURNLEFT || inputDirection === CONTROLLER_ENUM.TURNRIGHT)){\n            this.isMoving = true;\n            // EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\n        }\n    }\n\n    onDied(type: ENTITY_STATE_ENUM){\n        this.state = type;\n    }\n\n    update(){\n        this.updateXY();\n        super.update();\n    }\n}\n\n"]}