{"version":3,"sources":["file:///Users/lindanian/projects/git/cocos-creator-projects/practice/13-CrampedRoomOfDeath/assets/Scripts/Player/PlayerManager.ts"],"names":["_decorator","CONTROLLER_ENUM","DIRECTION_ENUM","ENTITY_STATE_ENUM","EVENT_ENUM","EventManager","PlayerStateMachine","EntityManager","DataManager","ccclass","property","ANIMATION_SPEED","PlayerManager","init","params","fsm","node","addComponent","targetX","x","targetY","y","Instance","on","PLAYER_CTRL","inputHandle","ATTACK_PLAYER","onDied","onDestroy","off","updateXY","speed","Math","abs","isMoving","emit","PLAYER_MOVE_END","inputDirection","enemyId","willAttack","state","DEATH","willBlock","console","log","move","onAttack","ATTACK","ATTACK_ENEMY","DOOR_OPEN","enemies","filter","item","i","length","enemyX","enemyY","id","enemyState","TOP","direction","LEFT","RIGHT","BOTTOM","tileInfo","door","doorX","doorY","doorState","bursts","playerNextY","weaponNextY","BLOCKFRONT","playerTile","weaponTile","burstX","burstY","burstId","burstState","moveable","turnable","weaponNextX","TURNLEFT","nextX","nextY","BLOCKTURNLEFT","showSmoke","SHOW_SMOKE","TURNRIGHT","type","update"],"mappings":"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","sourcesContent":["import {_decorator} from 'cc';\nimport {CONTROLLER_ENUM, DIRECTION_ENUM, ENTITY_STATE_ENUM, ENTITY_TYPE_ENUM, EVENT_ENUM} from \"db://assets/Enums\";\nimport EventManager from \"db://assets/Runtime/EventManager\";\nimport {PlayerStateMachine} from \"db://assets/Scripts/Player/PlayerStateMachine\";\nimport {EntityManager} from \"db://assets/Base/EntityManager\";\nimport DataManager from \"db://assets/Runtime/DataManager\";\nimport {IEntity} from \"db://assets/Levels\";\n\nconst { ccclass, property } = _decorator;\n\nconst ANIMATION_SPEED = 1/8;\n\n@ccclass('PlayerManager')\nexport class PlayerManager extends EntityManager {\n    targetX:number = 0\n    targetY:number = 0\n    isMoving: boolean = false\n    private readonly speed = ANIMATION_SPEED\n    // private testAttackCount = 0\n\n    async init(params: IEntity){\n        this.fsm = this.node.addComponent(PlayerStateMachine);\n        await this.fsm.init();\n        super.init(params);\n        this.targetX = this.x;\n        this.targetY = this.y;;\n        EventManager.Instance.on(EVENT_ENUM.PLAYER_CTRL, this.inputHandle, this);\n        EventManager.Instance.on(EVENT_ENUM.ATTACK_PLAYER, this.onDied, this);\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        EventManager.Instance.off(EVENT_ENUM.PLAYER_CTRL, this.inputHandle);\n        EventManager.Instance.off(EVENT_ENUM.ATTACK_PLAYER, this.onDied);\n    }\n\n    updateXY(){\n        if(this.targetX < this.x){\n            this.x -= this.speed\n        }else if(this.targetX > this.x){\n            this.x += this.speed\n        }\n\n        if(this.targetY < this.y){\n            this.y -= this.speed\n        }else if(this.targetY > this.y){\n            this.y += this.speed\n        }\n\n        if(Math.abs(this.targetX - this.x) < 0.1 && Math.abs(this.targetY - this.y) < 0.1 && this.isMoving){\n            this.x = this.targetX;\n            this.y = this.targetY;\n            this.isMoving = false;\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\n        }\n    }\n\n    inputHandle(inputDirection: CONTROLLER_ENUM){\n        //攻击\n        const enemyId = this.willAttack(inputDirection);\n        if(enemyId){\n            return;\n        }\n\n        if(this.state === ENTITY_STATE_ENUM.DEATH){\n            return;\n        }\n\n        if(this.willBlock(inputDirection)){\n            console.log('撞墙');\n            return\n        }\n        this.move(inputDirection);\n    }\n\n    onAttack(enemyId: string){\n        if(enemyId){\n            this.state = ENTITY_STATE_ENUM.ATTACK;\n            EventManager.Instance.emit(EVENT_ENUM.ATTACK_ENEMY, enemyId);\n            EventManager.Instance.emit(EVENT_ENUM.DOOR_OPEN);\n        }\n        return enemyId;\n    }\n\n    willAttack(inputDirection: CONTROLLER_ENUM){\n        const enemies = DataManager.Instance.enemies.filter((item)=> item.state !== ENTITY_STATE_ENUM.DEATH);\n        for (let i = 0; i < enemies.length; i++) {\n            const { x: enemyX, y: enemyY, id: enemyId, state: enemyState } = enemies[i];\n            if(inputDirection === CONTROLLER_ENUM.TOP && this.direction === DIRECTION_ENUM.TOP && enemyX === this.x && enemyY === this.targetY - 2){\n                console.log('玩家攻击');\n                return this.onAttack(enemyId);\n            }else if(inputDirection === CONTROLLER_ENUM.LEFT && this.direction === DIRECTION_ENUM.LEFT && enemyX === this.targetX - 2 && enemyY === this.y){\n                return this.onAttack(enemyId);\n            }else if(inputDirection === CONTROLLER_ENUM.RIGHT && this.direction === DIRECTION_ENUM.RIGHT && enemyX === this.targetX + 2 && enemyY === this.y){\n                // this.testAttackCount++\n                // if(this.testAttackCount === 3){\n                //     return false;\n                // }\n                return this.onAttack(enemyId);\n            }else if(inputDirection === CONTROLLER_ENUM.BOTTOM && this.direction === DIRECTION_ENUM.BOTTOM && enemyX === this.x && enemyY === this.targetY + 2){\n                return this.onAttack(enemyId);\n            }else {\n                return '';\n            }\n        }\n    }\n\n    willBlock(inputDirection: CONTROLLER_ENUM){\n        const { targetX: x, targetY: y, direction } = this;\n        console.log('this', this);\n        const {\n            tileInfo,\n            door: { x: doorX, y: doorY, state: doorState },\n        } = DataManager.Instance;\n        const enemies = DataManager.Instance.enemies.filter((item)=> item.state !== ENTITY_STATE_ENUM.DEATH);\n        const bursts = DataManager.Instance.bursts.filter((item)=> item.state !== ENTITY_STATE_ENUM.DEATH);\n\n        //按钮方向-向上\n        if(inputDirection === CONTROLLER_ENUM.TOP){\n            if(direction === DIRECTION_ENUM.TOP){\n                //疑问\n                const playerNextY = y - 1;\n                const weaponNextY = y - 2;\n                //玩家走出地图\n                if(playerNextY <= 1){\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\n                    return true;\n                }\n                //下一个瓦片\n                const playerTile = tileInfo[x][playerNextY];\n                const weaponTile = tileInfo[x][weaponNextY];\n\n                //门的碰撞\n                if(((x === doorX && playerNextY === doorY) || (x === doorX && weaponNextY === doorY)) && doorState !== ENTITY_STATE_ENUM.DEATH){\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\n                    return true;\n                }\n\n                //敌人的碰撞\n                for (let i = 0; i < enemies.length; i++) {\n                    const { x: enemyX, y: enemyY, id: enemyId, state: enemyState } = enemies[i];\n                    if(((x === enemyX && playerNextY === enemyY) || (x === enemyX && weaponNextY === enemyY))){\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\n                        return true;\n                    }\n                }\n\n                //地裂的碰撞\n                for (let i = 0; i < bursts.length; i++) {\n                    const { x: burstX, y: burstY, id: burstId, state: burstState } = bursts[i];\n                    if(((x === burstX && playerNextY === burstY) || (x === burstX && weaponNextY === burstY))){\n                        return false;\n                    }\n                }\n\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\n                    //empty\n                }else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\n                    return true;\n                }\n            }else if(direction === DIRECTION_ENUM.LEFT){\n                //左方向移动\n                const playerNextY = y - 1;\n                const weaponNextX = x - 1;\n                const weaponNextY = playerNextY;\n                //下一个瓦片\n                const playerTile = tileInfo[x][playerNextY];\n                const weaponTile = tileInfo[weaponNextX][weaponNextY];\n                if(playerTile?.moveable && weaponTile.moveable){\n                    //empty\n                }else {\n                    return true;\n                }\n            }else if(direction === DIRECTION_ENUM.RIGHT){\n                //右方向移动\n                const playerNextY = y - 1;\n                const weaponNextX = x + 1;\n                const weaponNextY = playerNextY;\n                //下一个瓦片\n                const playerTile = tileInfo[x][playerNextY];\n                const weaponTile = tileInfo[weaponNextX][weaponNextY];\n                if(playerTile?.moveable && weaponTile.moveable){\n                    //empty\n                }else {\n                    return true;\n                }\n            }\n        }else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\n            let nextX\n            let nextY\n            // console.log('direction', direction)\n            if(direction === DIRECTION_ENUM.TOP){\n                nextX = x - 1;\n                nextY = y - 1;\n            }else if(direction === DIRECTION_ENUM.BOTTOM){\n                nextX = x + 1;\n                nextY = y + 1;\n            }else if(direction === DIRECTION_ENUM.LEFT){\n                nextX = x - 1;\n                nextY = y + 1;\n            }else if(direction === DIRECTION_ENUM.RIGHT){\n                nextX = x + 1;\n                nextY = y - 1;\n            }\n\n            //门的碰撞\n            if(((x === doorX && nextY === doorY) || (nextX === doorX && y === doorY) || (nextX === doorX && nextY === doorY)) && doorState !== ENTITY_STATE_ENUM.DEATH){\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\n                return true;\n            }\n\n            //敌人的碰撞\n            for (let i = 0; i < enemies.length; i++) {\n                const { x: enemyX, y: enemyY, id: enemyId, state: enemyState } = enemies[i];\n                if(((x === enemyX && nextY === enemyY) || (x === enemyX && y === enemyY) || (nextX === enemyX && nextY === enemyY))){\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\n                    return true;\n                }\n            }\n\n            //判断地图元素\n            // console.log('tileInfo', tileInfo)\n            // console.log('x', x)\n            // console.log('nextX', nextX)\n            // console.log('y', y)\n            // console.log('nextY', nextY)\n            if(\n                (!tileInfo[x][nextY] || tileInfo[x][nextY].turnable) &&\n                (!tileInfo[nextX][y] || tileInfo[nextX][y].turnable) &&\n                (!tileInfo[nextX][nextY] || tileInfo[nextX][nextY].turnable)\n            ){\n                //empty\n            }else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //生成移动烟雾\n    showSmoke(direction: CONTROLLER_ENUM){\n        EventManager.Instance.emit(EVENT_ENUM.SHOW_SMOKE, this.x, this.y, direction);\n    }\n\n    //玩家移动\n    move(inputDirection: CONTROLLER_ENUM){\n        if (inputDirection === CONTROLLER_ENUM.TOP){\n            this.targetY -=1;\n            this.showSmoke(inputDirection);\n        }else if(inputDirection === CONTROLLER_ENUM.BOTTOM){\n            this.targetY +=1;\n            this.showSmoke(inputDirection);\n        }else if(inputDirection === CONTROLLER_ENUM.LEFT){\n            this.targetX -=1;\n            this.showSmoke(inputDirection);\n        }else if(inputDirection === CONTROLLER_ENUM.RIGHT){\n            this.targetX +=1;\n            this.showSmoke(inputDirection);\n        }else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\n            if(this.direction === DIRECTION_ENUM.TOP){\n                this.direction = DIRECTION_ENUM.LEFT;\n            }else if(this.direction === DIRECTION_ENUM.LEFT){\n                this.direction = DIRECTION_ENUM.BOTTOM;\n            }else if(this.direction === DIRECTION_ENUM.BOTTOM){\n                this.direction = DIRECTION_ENUM.RIGHT;\n            }else if(this.direction === DIRECTION_ENUM.RIGHT){\n                this.direction = DIRECTION_ENUM.TOP;\n            }\n            this.state = ENTITY_STATE_ENUM.TURNLEFT;\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\n        }\n        if(!(inputDirection === CONTROLLER_ENUM.TURNLEFT || inputDirection === CONTROLLER_ENUM.TURNRIGHT)){\n            this.isMoving = true;\n            // EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\n        }\n    }\n\n    onDied(type: ENTITY_STATE_ENUM){\n        this.state = type;\n    }\n\n    update(){\n        this.updateXY();\n        super.update();\n    }\n}\n\n"]}