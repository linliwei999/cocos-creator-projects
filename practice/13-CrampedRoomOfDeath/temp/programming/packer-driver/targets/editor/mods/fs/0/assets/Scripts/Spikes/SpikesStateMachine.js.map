{"version":3,"sources":["file:///Users/lindanian/projects/git/cocos-creator-projects/practice/13-CrampedRoomOfDeath/assets/Scripts/Spikes/SpikesStateMachine.ts"],"names":["_decorator","Animation","ENTITY_TYPE_ENUM","FSM_PARAMS_TYPE_ENUM","PARAMS_NAME_ENUM","SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM","getInitParamsNumber","StateMachine","SpikesOneSubStateMachine","SpikesTwoSubStateMachine","SpikesThreeSubStateMachine","SpikesManager","SpikesFourSubStateMachine","ccclass","property","SpikesStateMachine","restTrigger","_","item","params","type","TRIGGER","value","init","animationComponent","addComponent","initParams","initStateMachine","initAnimationEvent","Promise","all","waitingList","set","SPIKES_CURRENT_COUNT","SPIKES_TOTAL_COUNT","stateMachines","SPIKES_ONE","SPIKES_TWO","SPIKES_THREE","SPIKES_FOUR","on","EventType","FINISHED","name","defaultClip","totalCount","getParams","includes","node","getComponent","backZero","run","currentState","get"],"mappings":"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","sourcesContent":["import {_decorator, Animation, AnimationClip, Component, SpriteFrame} from 'cc';\nimport {\n    ENTITY_STATE_ENUM,\n    ENTITY_TYPE_ENUM,\n    FSM_PARAMS_TYPE_ENUM,\n    PARAMS_NAME_ENUM,\n    SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM\n} from \"db://assets/Enums\";\nimport {getInitParamsNumber, getInitParamsTrigger, StateMachine} from \"db://assets/Base/StateMachine\";\nimport SpikesOneSubStateMachine from \"db://assets/Scripts/Spikes/SpikesOneSubStateMachine\";\nimport SpikesTwoSubStateMachine from \"db://assets/Scripts/Spikes/SpikesTwoSubStateMachine\";\nimport SpikesThreeSubStateMachine from \"db://assets/Scripts/Spikes/SpikesThreeSubStateMachine\";\nimport {SpikesManager} from \"db://assets/Scripts/Spikes/SpikesManager\";\nimport SpikesFourSubStateMachine from \"db://assets/Scripts/Spikes/SpikesFourSubStateMachine\";\n\nconst { ccclass, property } = _decorator;\n\n//自定义联合类型\ntype ParamsValueType = boolean | number;\n\n@ccclass('SpikesStateMachine')\nexport class SpikesStateMachine extends StateMachine {\n\n    restTrigger(){\n        for(const [_, item] of this.params){\n            if(item.type === FSM_PARAMS_TYPE_ENUM.TRIGGER){\n                item.value = false;\n            }\n        }\n    }\n\n    async init(){\n        this.animationComponent = this.addComponent(Animation);\n        this.initParams();\n        this.initStateMachine();\n        this.initAnimationEvent();\n        await Promise.all(this.waitingList);\n    }\n\n    initParams(){\n        this.params.set(PARAMS_NAME_ENUM.SPIKES_CURRENT_COUNT, getInitParamsNumber());\n        this.params.set(PARAMS_NAME_ENUM.SPIKES_TOTAL_COUNT, getInitParamsNumber());\n    }\n\n    initStateMachine(){\n        this.stateMachines.set(ENTITY_TYPE_ENUM.SPIKES_ONE, new SpikesOneSubStateMachine(this));\n        this.stateMachines.set(ENTITY_TYPE_ENUM.SPIKES_TWO, new SpikesTwoSubStateMachine(this));\n        this.stateMachines.set(ENTITY_TYPE_ENUM.SPIKES_THREE, new SpikesThreeSubStateMachine(this));\n        this.stateMachines.set(ENTITY_TYPE_ENUM.SPIKES_FOUR, new SpikesFourSubStateMachine(this));\n    }\n\n    initAnimationEvent(){\n        this.animationComponent.on(Animation.EventType.FINISHED, ()=> {\n            const name = this.animationComponent.defaultClip.name;\n            const totalCount =  this.getParams(PARAMS_NAME_ENUM.SPIKES_TOTAL_COUNT);\n            // console.log('totalCount', totalCount);\n            // console.log('SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_FOUR', SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_FOUR);\n            // console.log('name', name);\n            if(\n                (totalCount === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_ONE) && name.includes(`spikesone/two`) ||\n                (totalCount === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_TWO) && name.includes(`spikestwo/three`) ||\n                (totalCount === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_THREE) && name.includes(`spikesthree/four`) ||\n                    (totalCount === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_FOUR) && name.includes(`spikesfour/five`)\n            ){\n                this.node.getComponent(SpikesManager).backZero();\n            }\n\n            // const whiteList = ['attack'];\n            // if(whiteList.some(v=> name.includes(v))){\n            //     this.node.getComponent(EntityManager).state = ENTITY_STATE_ENUM.IDLE;\n            // }\n        });\n    }\n\n    run(){\n        const totalCount = this.getParams(PARAMS_NAME_ENUM.SPIKES_TOTAL_COUNT);\n        switch (this.currentState){\n            case this.stateMachines.get(ENTITY_TYPE_ENUM.SPIKES_ONE):\n            case this.stateMachines.get(ENTITY_TYPE_ENUM.SPIKES_TWO):\n            case this.stateMachines.get(ENTITY_TYPE_ENUM.SPIKES_THREE):\n            case this.stateMachines.get(ENTITY_TYPE_ENUM.SPIKES_FOUR):\n                if(totalCount === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_ONE){\n                    this.currentState = this.stateMachines.get(ENTITY_TYPE_ENUM.SPIKES_ONE);\n                }else if(totalCount === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_TWO){\n                    this.currentState = this.stateMachines.get(ENTITY_TYPE_ENUM.SPIKES_TWO);\n                }else if(totalCount === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_THREE){\n                    this.currentState = this.stateMachines.get(ENTITY_TYPE_ENUM.SPIKES_THREE);\n                }else if(totalCount === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_FOUR){\n                    this.currentState = this.stateMachines.get(ENTITY_TYPE_ENUM.SPIKES_FOUR);\n                }else {\n                    this.currentState = this.currentState;\n                }\n                break;\n            default:\n                this.currentState = this.stateMachines.get(ENTITY_TYPE_ENUM.SPIKES_ONE);\n        }\n    }\n}\n\n"]}