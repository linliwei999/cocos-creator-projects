{"version":3,"sources":["file:///Users/lindanian/projects/git/cocos-creator-projects/practice/13-CrampedRoomOfDeath/assets/Scripts/Sence/BattleManager.ts"],"names":["_decorator","Component","TileMapManager","createUINode","Levels","DataManager","TILE_HEIGHT","TILE_WIDTH","EventManager","DIRECTION_ENUM","ENTITY_STATE_ENUM","ENTITY_TYPE_ENUM","EVENT_ENUM","PlayerManager","WoodenSkeletonManager","IronSkeletonManager","DoorManager","BurstManager","ccclass","property","BattleManager","onLoad","Instance","on","NEXT_LEVEL","nextLevel","onDestroy","off","start","generateStage","initLevel","level","levelIndex","clearLevel","mapInfo","mapRowCount","length","mapColumnCount","generateTileMap","stage","destroyAllChildren","reset","setParent","node","tileMap","tileManager","addComponent","init","adaptPos","generateBursts","generateDoor","generateEnemies","generatePlayer","player","playerManager","x","y","type","PLAYER","direction","TOP","state","IDLE","emit","PLAYER_BORN","enemy1","woodenSkeletonManager","SKELETON_WOODEN","enemies","push","enemy2","ironSkeletonManager","SKELETON_IRON","door","doorManager","DOOR","burst","burstManager","BURST","bursts","disX","disY","setPosition"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\nimport {TileMapManager} from \"db://assets/Scripts/Tile/TileMapManager\";\nimport {createUINode} from \"db://assets/Utils\";\nimport Levels, {ILevel} from \"db://assets/Levels\";\nimport DataManager from \"db://assets/Runtime/DataManager\";\nimport {TILE_HEIGHT, TILE_WIDTH} from \"db://assets/Scripts/Tile/TileManager\";\nimport EventManager from \"db://assets/Runtime/EventManager\";\nimport {DIRECTION_ENUM, ENTITY_STATE_ENUM, ENTITY_TYPE_ENUM, EVENT_ENUM} from \"db://assets/Enums\";\nimport {PlayerManager} from \"db://assets/Scripts/Player/PlayerManager\";\nimport {WoodenSkeletonManager} from \"db://assets/Scripts/WoodenSkeleton/WoodenSkeletonManager\";\nimport {IronSkeletonManager} from \"db://assets/Scripts/IronSkeleton/IronSkeletonManager\";\nimport {DoorManager} from \"db://assets/Scripts/Door/DoorManager\";\nimport {BurstManager} from \"db://assets/Scripts/Burst/BurstManager\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('BattleManager')\nexport class BattleManager extends Component {\n    // [1]\n    // dummy = '';\n\n    // [2]\n    // @property\n    // serializableDummy = 0;\n    level: ILevel\n    stage: Node\n\n    onLoad(){\n        EventManager.Instance.on(EVENT_ENUM.NEXT_LEVEL, this.nextLevel, this);\n    }\n\n    onDestroy(){\n        EventManager.Instance.off(EVENT_ENUM.NEXT_LEVEL, this.nextLevel);\n    }\n\n    start () {\n        this.generateStage();\n        this.initLevel();\n    }\n\n    initLevel(){\n        const level = Levels[`level${DataManager.Instance.levelIndex}`];\n        if(level){\n            this.clearLevel();\n            this.level = level;\n            //把地图数据存到数据中心(单例)\n            DataManager.Instance.mapInfo = this.level.mapInfo;\n            DataManager.Instance.mapRowCount = this.level.mapInfo.length || 0;\n            DataManager.Instance.mapColumnCount = this.level.mapInfo[0].length || 0;\n            this.generateTileMap();\n            // this.generateDoor();\n            // this.generatePlayer();\n            // this.generateEnemies();\n        }\n    }\n\n    //下一关函数\n    nextLevel(){\n        DataManager.Instance.levelIndex++\n        this.initLevel();\n    }\n\n    clearLevel(){\n        this.stage.destroyAllChildren();\n        DataManager.Instance.reset();\n    }\n\n    generateStage(){\n        //创建舞台\n        this.stage = createUINode();\n        this.stage.setParent(this.node);\n    }\n\n    //生成地图\n    async generateTileMap(){\n        const tileMap = createUINode();\n        tileMap.setParent(this.stage);\n        const tileManager = tileMap.addComponent(TileMapManager);\n        await tileManager.init();\n        this.adaptPos();\n        this.generateBursts();\n        this.generateDoor();\n        this.generateEnemies();\n        this.generatePlayer();\n    }\n\n    //生成玩家\n    async generatePlayer(){\n        const player = createUINode();\n        player.setParent(this.stage);\n        const playerManager = player.addComponent(PlayerManager);\n        await playerManager.init({\n            x: 2,\n            y: 8,\n            type: ENTITY_TYPE_ENUM.PLAYER,\n            direction: DIRECTION_ENUM.TOP,\n            state: ENTITY_STATE_ENUM.IDLE\n        });\n        DataManager.Instance.player = playerManager;\n        EventManager.Instance.emit(EVENT_ENUM.PLAYER_BORN, true);\n    }\n\n    //生成敌人\n    async generateEnemies(){\n        //生成木骷髅\n        const enemy1 = createUINode();\n        enemy1.setParent(this.stage);\n        const woodenSkeletonManager = enemy1.addComponent(WoodenSkeletonManager);\n        await woodenSkeletonManager.init({\n            x: 7,\n            y: 7,\n            type: ENTITY_TYPE_ENUM.SKELETON_WOODEN,\n            direction: DIRECTION_ENUM.TOP,\n            state: ENTITY_STATE_ENUM.IDLE\n        });\n        DataManager.Instance.enemies.push(woodenSkeletonManager);\n\n        //生成铁骷髅\n        const enemy2 = createUINode();\n        enemy2.setParent(this.stage);\n        const ironSkeletonManager = enemy2.addComponent(IronSkeletonManager);\n        await ironSkeletonManager.init({\n            x: 8,\n            y: 6,\n            type: ENTITY_TYPE_ENUM.SKELETON_IRON,\n            direction: DIRECTION_ENUM.TOP,\n            state: ENTITY_STATE_ENUM.IDLE\n        });\n        DataManager.Instance.enemies.push(ironSkeletonManager);\n    }\n\n    //生成门\n    async generateDoor(){\n        const door = createUINode();\n        door.setParent(this.stage);\n        const doorManager = door.addComponent(DoorManager);\n        await doorManager.init({\n            x: 7,\n            y: 8,\n            type: ENTITY_TYPE_ENUM.DOOR,\n            direction: DIRECTION_ENUM.TOP,\n            state: ENTITY_STATE_ENUM.IDLE\n        });\n        DataManager.Instance.door = doorManager;\n    }\n\n    //地裂瓦片\n    async generateBursts(){\n        const burst = createUINode();\n        burst.setParent(this.stage);\n        const burstManager = burst.addComponent(BurstManager);\n        await burstManager.init({\n            x: 2,\n            y: 6,\n            type: ENTITY_TYPE_ENUM.BURST,\n            direction: DIRECTION_ENUM.TOP,\n            state: ENTITY_STATE_ENUM.IDLE\n        });\n        DataManager.Instance.bursts.push(burstManager);\n    }\n\n    //瓦片地图适配屏幕\n    adaptPos () {\n        const { mapRowCount, mapColumnCount } = DataManager.Instance;\n        const disX = TILE_WIDTH * mapRowCount / 2;\n        const disY = TILE_HEIGHT * mapColumnCount / 2 + 80;\n        this.stage.setPosition(-disX, disY);\n    }\n}\n\n"]}